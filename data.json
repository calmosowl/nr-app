[
    {
        "title": "Pebble Kombat. История разработки игры для часов на Javascript",
        "text": "Здравствуйте, меня зовут Александр и я анонимный питоноголик. Но год назад мне посчастливилось написать одну игру исключительно на JavaScript для умных часов Pebble… \r\n\r\n\r\nКонцепт\r\nИдея игры была рождена случайно, в муках и попытках объяснить школьникам основы ООП. Компьютеру и игроку сопоставлялся класс бойца с тремя наборами хитпоинтов для головы, тела и ног. По очереди игрок выбирал что он будет атаковать или блокировать. Компьютер же решал это случайным образом. Написать пошаговый файтинг было интересно всем, и школьникам и мне. Но затем меня посетила мысль, почему бы не развить игру из обучающей до полноценной (относительно). К тому же на днях мне пришли мои первые Pebble Steel, чьи три замечательные боковые кнопочки как нельзя лучше подходили под формат игры.\r\n\r\n\r\n\r\nЧто ж, процесс пошел. В результате творческих порывов на выходе к версии 1.0 я придумал 8 персонажей, каждый со своим уникальным умением, которое активировалось каждую фазу игры при атаке или блоке. К примеру Берсерк при определенных условиях начинал пробивать блок, а Некромант и вовсе отражал весь блокируемый урон обратно атакующему. Запланировано было и два игровых режима: Турнир и Выживание. \r\n\r\nНазвание для своего первого пет-проджекта хотелось придумать эффектное и со смыслом. Так получился гибрид небезызвестного файтинга Mortal Kombat и бренда самих Pebble Smartwatch.\r\n\r\nГрафика\r\nЛогика логикой, а персонажей и интерфейс нужно было нарисовать. Тут мне на помощь пришли фрилансеры. Точнее один. Точнее одна. Точнее я сам ее нашел. Сработались мы быстро. Предоставив ей всю имеющуюся информацию, в том числе и технические характеристики экрана, она нарисовала отменных персонажей и фоны к ним.\r\n\r\n\r\n\r\nИнтересным моментом было придумать на чем персонажи будут стоять. Сначала мы пытались расположить обоих бойцов на одной платформе, но смотрелось это довольно просто и ограничивало нас в дальнейшей.\r\n\r\nОтдельной историей была разработка стартового экрана, которую я не мог принять вплоть до последнего варианта. (Кстати идея иконки режима «Турнир» была мной подсмотрена из игры Guild Wars 2, в которой подобным образом изображалась способность Quickness, но я надеюсь никто меня не побъет.)\r\n\r\n\r\n\r\nЧерез пару недель я получил весь сет графики и теперь спокойно можно было приступать к работе.\r\n\r\nРазработка\r\nОбратившись к порталу разработчиков, я обнаружил, что, увы, своим любимым питоном я воспользоваться не смогу. Недолго посмотрев примеры на С и JavaScript, я обратился к документации библиотеки Pebble.JS. Игра оказалась достаточно объемной (более 800 строк кода). К тому же на новом для меня языке. К тому же игру хотелось дорабатывать и дорабатывать. \r\n\r\nВсе оказалось проще, чем я думал. Создаем экземпляр окна, добавляем в него необходимую графику (загружалась в список _items) и запускаем метод show() для отображения.\r\n\r\nvar main_wnd = new UI.Window();\n\nfunction main_wnd_gen(){\n  var main_menu = new UI.Image({\n    position: new Vector2(0, 0),\n    size: new Vector2(144, 168),\n    image: 'MENU',\n    compositing: 'set'\n  });\n  main_wnd.add(main_menu);\n}\n\nmain_wnd_gen();\nmain_wnd.show();\r\nПравда в процессе разработки появлялись некоторые нюансы. Оказалось, не совсем разумно было позволять компьютеру случайно выбирать блок, иначе игра сводилась к битью по одному месту. Пришлось вмешаться, увеличив шанс блокирования именно критической зоны с наименьшим количеством хитпоинтов.\r\n\r\nthis.blocking = function (block) {\n    if (this.ai == 'Enemy'){\n      this.save = ['h', 'b', 'f'];\n      for (var i = 0; i < 3; i++){\n        if (this.hp[parts[i]] < 10){\n          this.save.push(parts[i], parts[i], parts[i]);\n        }\n        if (this.hp[parts[i]] < 20){\n          this.save.push(parts[i]);\n        }\n      }\n      this.block = this.save[Math.floor(Math.random() * this.save.length)];\n    } else {\n      this.block = block;\n    }\n  };\r\nБыли и другие казусы. Не знаю почему, но я так и не смог менять объекты по их именам — пришлось напрямую обращаться к массиву _items объекта окна и менять элементы\r\n\r\nvar game_wnd = new UI.Window();\n...\nfunction game_wnd_gen(){\n  game_wnd._items = [];\n...\n  var attack = new UI.Image({\n    position: new Vector2(0, 0),\n    size: new Vector2(30, 30),\n    image: '',\n    compositing: 'set'\n  });\n  game_wnd.add(attack);\n...\n};\nfunction game_wnd_update(){\n  game_wnd._items[9].image('images/attack/' + heroes[1].name + side[1] + '.png');\r\nВ конце меня ждало разочарование. На платформе Aplite (это как раз первые Pebble и Pebble Steel) некоторые картинки отказывались загружаться, что привело к полной неиграбельности. Оставался лишь Basalt. \r\n\r\n\r\n\r\n5 сентября 2016\r\nТак в сентябре игра увидела мир. Никакой рекламы, никаких статей, лишь удовлетворение от того, что проект закончен. И каково было мое удивление, что уже через несколько дней один маленький мальчик написал видеообзор. Эта милота согревала мне сердце.\r\n\r\nА еще через несколько дней сам Jon Barlow (я на самом деле не знаю кто это, но «сам Jon Barlow» должен был поднять мое ЧСВ), в то время член команды Pebble и модератор магазина добавил игру в категорию Fresh Picks (сейчас он, конечно, никакой не свежий)\r\n\r\n\r\n\r\nМай 2017\r\nЯ оставил тщетные попытки нормально запустить игру на Aplite. На этот момент в игре присутствовал, но никак не отображался дополнительный урон, что вносило небольшую путаницу.\r\n\r\nНо появился Pebble 2. Перенос игры на еще одну платформу не составил труда, достаточно было добавить в файл appinfo.json поддержку Diorite. К тому же весь сет черно-белой графики остался еще с Aplite, который на новом SDK 4.x и вовсе отказался запускаться.\r\n\r\n\r\n\r\nОктябрь 2017\r\nУже прошел год с момента публикации игры. В статистике числилось порядка 360 скачиваний и 47 честных лайков игроков (ну ладно, 46. Один мой). У меня оставался нерешенный вопрос с отображением дополнительного урона у некоторых персонажей и пара спрайтов женских персонажей.\r\n\r\n\r\n\r\nДа-да, все 8 бойцов в результате оказались мужиками. Но никакого сексизма. Взяв волю в кулак, я уже самостоятельно дорисовал недостающие спрайты, дописал код, плюс добавил женского персонажа, лучницу (правда оставил его неиграбельным) и придумал еще один режим игры «Сумасброд», в котором уже и защищаться стало не так то просто. Это уже можно было назвать полноценным дополнением.\r\n\r\nP.S.\r\nЧто дальше? Да вроде бы и ничего. Можно было бы извратиться и написать многопользовательский режим. Но это мне кажется уже излишним, по крайней мере для часов.\r\n\r\nНа самом деле осталось множество идей вроде сюжетной линии, активных способностей, амуниция и артефакты. Но если тому и быть, и проект перерастет в Pebble Kombat 2, то он уже будет для мобильных. Заодно будет повод изучить еще один язык. ;)\r\n\r\nВладельцы часов Pebble Time и Pebble 2 могут побаловаться и «заценить» проект лично. \r\nА вот для интересующихся копнуть глубже я выложил исходники на Github."
    },
    {
        "title": "Как обложить сервис метриками и не облажаться",
        "text": "Меня зовут Евгений Жиров, я разработчик в инфраструктурной команде Контур.Экстерна. Этот пост — текстовая версия моего доклада с недавнего митапа Perm Tech Talks.\r\nУ нас в команде 200 микросервисов, которые должны быть отказоустойчивыми, чтобы пользователи не замечали никаких проблем. А проблемы, конечно, возникают. Поэтому мы собираем метрики, чтобы знать, как дела у конкретных сервисов и у системы в целом. Метрики помогают вовремя среагировать и всё починить.\r\nМетрики можно собирать, хранить и визуализировать. И есть много способов собрать метрики неправильно, нарисовать с ошибками и сделать неверные выводы.\r\nЯ расскажу о нескольких примерах из своей работы и поделюсь советами.\r\nКакие бывают метрики?\r\n\r\nМетрика requests.count.byhost.*\r\nКоличественные метрики. Самая простая метрика для любого веб-сервиса — это число запросов, которые влетают в него в единицу времени. Обычно эту метрику называют RPS, requests per second. \r\nВот пример. У этого сервиса три реплики, и суммарно в них влетает почти 400 запросов в секунду. Этот график очень простой, но даёт много информации. Видно, что нагрузка равномерно распределяется по репликам сервиса, каждая реплика получает примерно равное количество запросов. Значит, с настройками балансировщиков всё в порядке.\r\nИнтервалы времени. Это более интересные метрики. Обычно их отображают в перцентилях. Например, этот график читается так: 99% запросов на поиск выполняются быстрее, чем 25 мс; а 95% запросов — быстрее, чем 3 мс.\r\n\r\nМетрика client.requests.search.latency.*\r\nСистемные метрики. Это отдельный класс метрик. Они не связаны с самим приложением, но позволяют диагностировать состояние ресурсов, которые оно использует.\r\n\r\nМетрика system.loadavg.*\r\nНа графике метрики одного из кластеров Cassandra — значение load average, поделённое на количество процессорных ядер. По ним можно определить, проседает ли наш кластер по CPU и нужно ли добавить больше железа. Здесь видно, что сейчас значение около 12% и пока CPU хватает.\r\nЕщё на графике виден профиль нагрузки. Здесь день, ночь, снова дневной пик активности и спад к вечеру. Важно знать, когда у приложения пиковая нагрузка. Часто бывает, что приложение в среднем не нагружено, а потом в него прилетает 10 000 запросов, и всё тормозит.\r\nЗачем нужны метрики?\r\nМетрики — это наши «глаза». Без метрик невозможно судить о нагрузках, производительности и отказоустойчивости приложения.\r\n\r\nМожно быстро реагировать на проблемы. На каждый график вешается оповещение, и когда значение превышает заданный порог, приходит уведомление.\r\nМожно следить, как кластер справляется с нагрузкой и вовремя добавлять железо.\r\nМожно сравнивать по графикам производительность приложения до и после релиза.\r\n\r\nКак начать собирать метрики?\r\nПредположим, вы пишете под .NET. Ищете в интернете «metrics for .NET apps» и получаете много библиотек с открытым кодом: например, Metrics.NET или App Metrics. Они помогают собирать метрики приложения.\r\nЧтобы хранить собранные метрики, вам нужна база данных. А чтобы рисовать графики — интерфейс для визуализации метрик. Мы в Контуре используем общепринятые Graphite и Grafana.\r\nВы всё настраиваете, разворачиваете своё приложение, но однажды понимаете, что облажались. Например, не смогли предвидеть поломку. Или просто не понимаете, что значат числа, которые вы собираете. Вот несколько примеров из моей работы.\r\nПример 1. Cargo programming\r\nВсе истории начинаются одинаково. Утром, примерно в 2 часа дня, я прихожу на работу. Смотрю на графики и внезапно вижу ошибки от любимого сервиса.\r\n\r\nОгромный пик! Хотя нет. Высота пика по вертикальной оси — всего 4×10–17 ошибок в минуту. При этом с сервисом всё в порядке, в логах чисто. Начинаю разбираться.\r\n\r\nСмотрю, что было с сервисом 15 часов назад. Здесь пик побольше и значения более адекватные. Но какая метрика отображается на графике? Errors per minute. Только вдумайтесь: 0,4 ошибки в минуту. Это немножко странно, потому что приложение отправляет количество ошибок каждую минуту. Это должно быть целое число: 0, 1, 2 или 100, но никак не 0,4. Здесь что-то не так. Как часто бывает при первой встрече с чем-то странным, решаю проигнорировать. Иду дальше писать код.\r\nПравда, проблема не отпускает и преследует на других графиках.\r\n\r\nВот график с временем чтения и записи в Cassandra. Синие линии — ошибки записи в базу данных. Эти метрики отправляет даже не мой код, а сама Cassandra. Получается, что в 10:10 начались ошибки и кончились в 10:35. Целых 25 минут Cassandra не работала.\r\nА сколько минут на самом деле была проблема? Вот клиентские метрики, то есть метрики сервисов, которые пишут в эту базу. Совершенно другая картина: в одну минуту было 50 тыс. проваленных записей, а потом всё снова стало хорошо.\r\n\r\nКогда что-то происходит во второй, третий, четвёртый раз — пора разобраться, что происходит. Как проще всего сделать? Нужен лабораторный эксперимент. Пишем тривиальный счётчик, который потокобезопасно считает количество событий, а потом в бесконечном цикле отправляет значение в Graphite и спит минуту.\r\nclass Counter\n{\n    private long value;\n\n    public void Add(long amount)\n    {\n        Interlocked.Add(ref value, amount);\n    }\n\n    public void Start()\n    {\n        while (true)\n        {\n            var result = Interlocked.Exchange(ref value, 0);\n            SaveToStorage(result);\n            Thread.Sleep(1000 * 60);\n        }\n    }\n}\r\nПишем два теста. В одном используем свой Counter, который работает понятным образом. В другом используем счётчик из популярной библиотеки. В моём случае это Meter из Metrics.NET, у него похожий интерфейс.\r\nКакую нагрузку считаем? Пусть 2 минуты будет 10 RPS, потом в течение 10 секунд — 100 RPS, а потом снова 10 RPS в течение 2 минут. Вот график:\r\n\r\nЗелёная линия — то, что на самом деле происходило с сервисом. А жёлтое — то, что даёт популярная библиотека. Не очень-то похоже.\r\nЧто тут происходит? Экспоненциальное сглаживание.\r\nВот ещё один пример. Для реального значения метрики 100 получается 54 путём взвешенного сложения всех предыдущих точек. Коэффициенты уменьшаются в геометрической прогрессии, и получается странное сглаженное значение.\r\n\r\nМы хотим померять количество запросов в секунду или количество ошибок в минуту, но получаем какие-то странные значения. Обидно, что такое поведение есть во многих популярных библиотеках для сбора метрик под .NET и Java. Изменить его довольно сложно.\r\nКакая причина? Я думаю, что дело в cargo programming, когда разработчики используют определённую технологию или пишут код определённым образом, потому что так делали деды. Исходные причины забыты, но все продолжают так делать, потому что все так делают.\r\nПри подсчёте метрик веб-сервисов экспоненциальное сглаживание только мешает. Оно не позволяет увидеть точные значения, врёт в пиках и даёт длинный хвост, который приводит к ложным срабатываниям оповещений. Оно скрывает реальный профиль нагрузки, потому что вместо одного пика мы видим совершенно другую фигуру, которая потом затухает ещё 15 часов.\r\n\r\nНаверняка многие из вас видели утилиту top в *nix. Она показывает три числа load average (за 1 минуту, 5 минут и 15 минут), сглаженные похожим образом. По ним нельзя судить о точном значении, но хорошо виден тренд. Например, можно увидеть, что за 15 минут нагрузка процессора серьёзно выросла. Тут сглаживание помогает, потому что с ним шумная метрика меняется гладко, а не болтается от 0 до 100.\r\nПример 2. Сonsolidation\r\nЕщё бывают проблемы с визуализацией метрик.\r\n\r\nПрихожу я опять на работу, смотрю на графики. Вот 95-й перцентиль времени поиска. Видно, что утром поиск тормозил: 550 мс у одной из точек, есть и другие пики. Может быть, это нормальное поведение сервиса? Надо изменить масштаб и посмотреть, сколько таких пиков было за неделю.\r\n\r\nЗдесь тоже много пиков. Но тот самый, в 6 утра, поменял своё значение! Теперь 276 мс. Как такое может быть?\r\nПричина в стратегии объединения точек — consolidate by в Graphite. Когда вы изменяете временной масштаб, и все точки не помещаются на экран, Graphite объединяет их с помощью выбранной функции. Бывают разные, но по умолчанию это среднее, которое плохо подходит для этого графика. Обычно в случае перцентилей интересуют максимумы, иногда хочется взять сумму. \r\nЕсли забыть о консолидации точек, выбрать неверную функцию или оставить ту, что по умолчанию, легко сделать неверные выводы из графиков.\r\nПример 3. Графики врут\r\n\r\nОпять прихожу на работу, открываю график, а там совсем всё плохо. Уже сутки сервис стабильно возвращает 503 ошибки каждую минуту. Здесь-то в чём проблема? Она очень простая и забавная: просто недостаточно данных для визуализации.\r\nВ Graphite есть настройка о том, как нужно соединять точки на графике, если в какое-то время не было данных. Если выбрать бездумно, то легко сделать неверный вывод. На самом-то деле ошибок было всего несколько в паре случаев.\r\n\r\nЧто делать? Писать в метрики нули, если ошибок не было, или использовать другой тип графика — например, столбики.\r\nПример 4. Физический смысл метрик\r\nИзвестно, что приложения при работе используют оперативную память. Если приложение выделило много памяти и не может выделить ещё больше, оно начинает падать со странными ошибками. \r\n\r\nВ моём случае одно из приложений начало падать из-за access violation. Я понял, что причина именно в нехватке памяти, но по метрикам всё было отлично — подумаешь, 40 МБ, ничего страшного.\r\n\r\nНа самом деле, конечно, нет такой метрики — «сколько памяти использует приложение». Метрик для оперативной памяти много. Например, у каждого процесса в Windows есть working set и private bytes. Если грубо, working set — это объём занятой физической памяти, а private bytes — сколько памяти вообще выделило приложение. У приложения может быть куча данных в файле подкачки, но почти ничего в физической памяти. Приложению будет плохо, и оно развалится. \r\nНадо помнить, что нет таких простых метрик как «память» или «загрузка процессора». Метрик больше, и они все значат что-то конкретное.\r\nВыводы\r\n\r\nНужно понимать, что измеряешь. Если мерять просто «память», то полученные значения не будут значить практически ничего.\r\nНужно понимать, как работают инструменты. Например, помнить, что библиотека для сбора метрик сделает экспоненциальное сглаживание, а база данных консолидирует точки по какому-то алгоритму.\r\nНужно задумываться, если метрики не соответствуют другим данным (например, логам) или наблюдаемому поведению системы. Нельзя проходить мимо. Если не можете объяснить несоответствие, то полученные метрики для вас бесполезны.\r\n\r\nА как вы собираете и визуализируете метрики? Какие сложности со сбором метрики и их отображением были у вас?"
    },
    {
        "title": "Реализация «Тетриса» в игре «Жизнь»",
        "text": "То, что начиналось как приключение, закончилось одиссеей.\r\n\r\n\r\n\r\nЗадача по созданию тетрис-процессора размером 2 940 928 x 10 295 296\r\nЭтот проект стал кульминацией труда множества пользователей в течение последних полутора лет. Хотя состав команды со временем менялся, в написании этой статьи принимали участие следующие авторы:\r\n\r\n\r\nPhiNotPi\r\nEl'endia Starman\r\nK Zhang\r\nMuddyfish\r\nKritixi Lithos\r\nMego\r\nQuartata\r\n\r\nТакже мы хотим поблагодарить 7H3_H4CK3R, Conor O'Brien и многих других пользователей, вложивших свои труд в решение этой задачи.\r\n\r\nИз-за беспрецедентного масштаба этой задачи, статья разделена на несколько частей, написанных членами команды. Каждый участник писал о своей отдельной подтеме, приблизительно соответствующей тем областям проекта, в которых был задействован.\r\n\r\nСтоит также заглянуть в GitHub нашей организации, в котором мы выложили весь код, написанный для решения задачи. Вопросы можно задавать в нашем чате разработки.\r\n\r\n\r\nЧасть 1: обзор\r\nЭтот проект начался как ответ на вопрос со Stackexchange:\r\n\r\nЭто теоретическая задача — она не имеет ни простого, ни тривиального ответа.\r\n\r\nВ игре «Жизнь» Конвея существуют такие конструкции, как метапиксели, которые позволяют игре «Жизнь» симулировать любую систему правил, похожую на «Жизнь». Кроме того, известно, что игра «Жизнь» Тьюринг-полная.\r\n\r\nВаша задача заключается в создании клеточного автомата, использующего правила игры «Жизнь» Конвея, который позволяет играть в «Тетрис».\r\n\r\nПрограмма должна получать ввод ручным изменением состояния автомата в определённом поколении, представляющим собой прерывание (т.е. перемещение фигуры влево или вправо, поворот, бросание вниз или случайная генерация новой фигуры для размещения на поле). Определённое количество поколений считается временем ожидания. Результат игры показывается где-нибудь в автомате. Полученный результат должен визуально напоминать поле для настоящего «Тетриса».\r\n\r\nВаша программа будет оцениваться по следующим критериям, в следующем порядке (нижние критерии являются допольнительными по отношению к более высоким):\r\n\r\n\r\nРазмер граничного прямоугольника — выигрывает прямоугольное поле с наименьшей площадью, полностью содержащее решение.\r\nНаименьшее количество изменений для ввода — выигрывает решение с наименьшим количеством ячеек (в худшем для вашего автомата случая), необходимых для ручной настройки в качестве прерывания.\r\nСамое быстрое выполнение — выигрывает решение с наименьшим количеством поколений для продвижения вперёд на один такт симуляции.\r\nНачальное количество живых клеток — выигрывает наименьшее количество.\r\nПервое опубликованное — выигрывает самый первый пост с решением.\r\n\r\nОсновопологающей идеей этого проекта стало абстрагирование. Вместо непосредственной разработки «Тетриса» в игре «Жизнь», мы пошагово расширяли создаваемую абстракцию. На каждом слое мы всё дальше уходили от сложностей «Жизни» и приближались к созданию компьютера, программировать который было бы так же просто, как любой другой.\r\n\r\nВо-первых, в качестве основы для компьютера мы использовали OTCA-метапиксели. Эти метапиксели могут эмулировать любые правила игры, похожей на «Жизнь». Важными источниками вдохновения для этого проекта стали Wireworld и компьютер Wireworld, мы стремились создать похожую конструкцию на основе метапикселей. Хотя эмулировать Wireworld с помощью OTCA-метапикселей невозможно, можно установить для разных метапикселей разные правила и создать конструкции из метапикселей, работающие подобно проводам Wireworld.\r\n\r\nСледующим шагом стало создание множества фундаментальных логических вентилей, которые можно использовать в качестве основы компьютера. На этом этапе мы уже имеем дело с концепциями, похожими на концепции дизайна процессоров реального мира. Вот пример вентиля OR, каждая ячейка этого изображения на самом деле является целым OTCA-метапикселем. Вы видите, как «электроны» (каждый из которых представляет собой единичный бит данных) входят и выходят из вентиля. Также видны все типы метапикселей, использованные нами для создания компьютера: B/S — чёрный фон, B1/S — синий, B2/S — зелёный, B12/S1 — красный.\r\n\r\n\r\n\r\nИз этого мы разработали архитектуру процессора. Мы потратили много времени на разработку архитектуры, которая была бы одновременно и понятной, и простой в реализации. Компьютер Wireworld использует рудиментарную transport-triggered architecture, в нашем же проекте используется гораздо более гибкая архитектура RISC, имеющая множественные опкоды и режимы адресации. Мы создали язык ассемблера QFTASM (Quest for Tetris Assembly), который управлял изготовлением процессора.\r\n\r\nТакже наш компьютер является асинхронным, это значит, что он не управляется глобальными часами. В процессе передачи внутри компьютера данные сопровождаются сигналом синхронизации. Это значит, что нам нужно отслеживать только локальные, а не глобальные тайминги компьютера.\r\n\r\nВот иллюстрация архитектуры нашего процессора:\r\n\r\n\r\n\r\nС этого момента нам остаётся только реализовать «Тетрис» в компьютере. Чтобы упростить задачу, мы разработали несколько способов компилирования высокоуровневого языка в QFTASM. У нас есть базовый язык Cogol, второй, более совершенный язык находится в процессе разработки, и, наконец, мы создаём бэкенд GCC. Сейчас программа «Тетриса» пишется на Cogol и компилируется из него.\r\n\r\nПосле того, как конечный код QFTASM «Тетриса» был сгенерирован, следующими шагами были сборка из этого кода в соответствующее ПЗУ, а затем из метапикселей в лежащую в основе игру «Жизнь», на чём наша работа будет закончена.\r\n\r\nЗапуск «Тетриса»\r\nТе, кто хочет поиграть в «Тетрис» без возни с компилятором, могут запустить исходный код «Тетриса» в интерпретаторе QFTASM. Для просмотра всей игры укажите отображаемые адреса ОЗУ 3-32. Вот постоянная ссылка для удобства: Tetris in QFTASM.\r\n\r\nХарактеристики игры:\r\n\r\n\r\nВсе 7 тетромино\r\nДвижение, вращение, плавное опускание фигур\r\nОчистка линий и подсчёт очков\r\nПоказ следующей фигуры\r\nВвод игрока добавляет случайности\r\n\r\nДисплей\r\nНаш компьютер представляет поле «Тетриса» как сетку в памяти. Адреса 10-31 отображают поле, адреса 5-8 — следующую фигуру, адрес 3 содержит счёт.\r\n\r\nВвод\r\nВвод в игре осуществляется ручным редактированием содержимого адреса 1 в ОЗУ. При использовании интерпретатора QFTASM это означает прямую запись по адресу 1. См. «Direct write to RAM» на странице интепретатора. Каждый ход требует изменения только одного бита ОЗУ, и этот регистр ввода автоматически сбрасывается после считывания события ввода.\r\n\r\nvalue motion\r\n 1 вращение против часовой стрелки\r\n 2 влево\r\n 4 вниз (плавное опускание)\r\n 8 вправо\r\n 16 вращение по часовой стрелке\r\n\r\nСистема подсчёта очков\r\nИгрок получает бонус за удаление нескольких линий за один ход.\r\n\r\n1 ряд = 1 очко\r\n2 ряда = 2 очка\r\n3 ряда = 4 очка\r\n4 ряда = 8 очков\r\n\r\nЧасть 2: OTCA-метапиксель и VarLife\r\nOTCA-метапиксель\r\n\r\n\r\nOTCA-метапиксель — это структура в конвеевской игре «Жизнь», которую можно использовать для симуляции любого клеточного автомата, похожего на «Жизнь». Процитирую LifeWiki (ссылка ниже):\r\n\r\nOTCA-метапиксель — это ячейка 2048 × 2048 из 35328 клеток, созданная Брайсом Дью… Она имеет множество преимуществ… в том числе способность эмулировать любой клеточный автомат, похожий на «Жизнь», и очень заметные при уменьшении масштаба клетки в состоянии ON и OFF...\r\nКлеточный автомат, похожий на «Жизнь», в сущности, означает то, что клетки рождаются и выживают на основании того, сколько из восьми соседних с ними клеток живо. Эти правила имеют следующий синтаксис: буква B, за которой следует количество живых соседей, приводящее к рождению, косая черта, буква S, за которой следует количество живых соседей, поддерживающих жизнь клетки. Немного запутанно, так что, думаю, лучше привести пример. Каноничную игру «Жизнь» можно представить в виде правила B3/S23, которое гласит, что мёртвая клетка, окружённая тремя соседями, становится живой, а любая живая клетка с двумя или тремя живыми соседями остаётся живой. В противном случае клетка умирает.\r\n\r\nНесмотря на то, что OTCA-метапиксель — это клетка 2048 x 2048, на самом деле он имеет ограничивающий прямоугольник в 2058 x 2058 клеток, потому что он перекрывается своими диагональными соседями пятью клетками во всех направлениях. Перекрывающие клетки необходимы для перехвата «глайдеров», которые излучаются, чтобы сообщать соседям-метаклеткам, что он включен. Благодаря этому они не будут влиять на другие метапиксели или бесконтрольно перемещаться. Правила рождения и выживания закодированы в специальной секции клеток в левой части метапикселя присутствием или отсутствием «едоков» в определённых позициях вдоль двух столбцов (один для рождения, другой для выживания). Что касается распознавания состояния соседних клеток, то вот что происходит:\r\n\r\nПоток 9-LWSS затем обходит по часовой стрелке вокруг ячейки, теряя LWSS на каждой соседней «включённой» клетке, запускающей ячейку памяти honeybit reaction. Количество отсутствующих LWSS подсчитывается распознаванием положения переднего LWSS с помощью сталкивания с другим LWSS с противоположного направления. Это столкновение выпускает глайдеры, которые запускают ещё одну или две honeybit reaction, если «едоки», определяющие состояние рождения/выживания отсутствуют.\r\nБолее подробная схема каждого аспекта OTCA-метапикселя представлена на его веб-сайте: How Does It Work?.\r\n\r\nVarLife\r\nЯ создал онлайн-симулятор правил Life-подобных игр, в котором можно задать поведение любой клетки в соответствии с любыми правилами, схожими с правилами «Жизни». Я назвал симулятор «Variations of Life». Для краткости потом это название сменилось на «VarLife». Вот его скриншот (ссылка на симулятор: http://play.starmaninnovations.com/varlife/BeeHkfCpNR):\r\n\r\n\r\n\r\nПримечательные особенности:\r\n\r\n\r\nПереключает клетки между состояниями «живая»/«мёртвая» и раскрашивает поле по различным правилам.\r\nСпособность запускать и останавливать симуляцию, выполнять по одному шагу за раз. Также возможно выполнять заданное количество шагов с максимальной скоростью или более медленно, со скоростью, устанавливаемой в тактах/с и мс/такт.\r\nИмеет возможность удалять все живые клетки или полностью сбрасывать поле в пустое состояние.\r\nМожет менять размер поля и клеток, а также включать горизонтальную и/или вертикальную тороидальную свёртку.\r\nПостоянные ссылки (которые кодируют всю информацию url) и короткие url (потому что иногда бывает слишком много информации, но они всё равно полезны).\r\nНаборы правил с заданием B/S, цветов и опциональной случайности.\r\nИ последнее — рендеринг gif!\r\n\r\nФункция render-to-gif — моя любимая, потому что на её реализацию ушла куча времени. Было очень здорово, когда я наконец доделал её в семь часов утра. С её помощью можно запросто делиться конструкциями VarLife с другими людьми.\r\n\r\nОсновная схема VarLife\r\nВ целом компьютеру VarLife требуется всего четыре типа клеток! Всего восемь состояний, с учётом состояний «мёртвый»/«живой»:\r\n\r\n\r\nB/S (чёрный/белый), которое служит в качестве буфера мжеду всеми компонентами, потому что клетки B/S никогда не могут быть живыми.\r\nB1/S (синие/голубые) — основной тип клеток, используемый для распространения сигналов.\r\nB2/S (зелёный/жёлтый) — в основном используется для управления сигналами, защищая их от обратного распространения.\r\nB12/S1 (красный/оранжевый) — используется в некоторых особых ситуациях, например, при пересечении сигналов и хранении бита данных.\r\n\r\nВоспользуйтесь этим коротким url, чтобы открыть VarLife с уже закодированными правилами: http://play.starmaninnovations.com/varlife/BeeHkfCpNR.\r\n\r\nПроводники\r\nСуществует несколько различных конструкций проводников с отличающимися характеристиками.\r\n\r\nЭто простейший и основной проводник в VarLife, полоса синего, ограниченная полосами зелёного.\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/WcsGmjLiBF\r\n\r\nЭто однонаправленный проводник. То есть он будет уничтожать все сигналы, пытающиеся пройти в противоположном направлении. Кроме того, он на одну клетку у́же основного проводника.\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/ARWgUgPTEJ\r\n\r\nСуществуют также диагональные проводники, но они почти не используются.\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/kJotsdSXIj\r\n\r\nШлюзы\r\nНа самом деле есть множество способов создания каждого отдельного шлюза, поэтому я покажу только по одному примеру каждого типа. На первом gif показаны, соответственно, шлюзы AND, XOR и OR. Основная идея заключается в том, что зелёная клетка действует как AND, синяя — как XOR, а красная — как OR, а все остальные клетки вокруг них просто обеспечивают правильную передачу.\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/EGTlKktmeI\r\n\r\nШлюз AND-NOT (сокращённо ANT) оказался жизненно необходимым компонентом. Этот шлюз передаёт сигнал от A тогда и только тогда, когда нет сигнала от B. То есть «A AND NOT B».\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/RsZBiNqIUy\r\n\r\nХотя это не совсем шлюз, но тайл пересечения проводников очень важен и полезен.\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/OXMsPyaNTC\r\n\r\nМежду прочим, здесь нет шлюза NOT. Так получилось потому, что без входящего сигнала должен создаваться постоянный вывод, который не очень хорошо себя проявляет со множеством таймингов, требуемых современным компьютерным оборудованием. Но нам в любом случае удалось обойтись без него.\r\n\r\nКроме того, многие компоненты намеренно создавались таким образом, чтобы умещаться в ограничивающий прямоугольник 11 на 11 (тайл), в котором от момента входа в тайл до выхода из тайла сигналам требуется 11 тактов. Это делает компоненты более модульными и их легче соединять вместе без необходимости регулировки проводников для обеспечения пространства или таймингов.\r\n\r\nО других шлюзах, исследованных/созданных в процессе изучения компонентов схем, можно прочитать в посте PhiNotPi: Building Blocks: Logic Gates.\r\n\r\nКомпоненты задержки\r\nВ процессе разработки оборудования компьютера KZhang придумал множество компонентов задержки, показанных ниже.\r\n\r\nЗадержка на 4 такта:\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/gebOMIXxdh\r\n\r\nЗадержка на 5 тактов:\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/JItNjJvnUB\r\n\r\nЗадержка на 8 тактов (три отдельных точки входа):\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/nSTRaVEDvA\r\n\r\nЗадержка на 11 тактов:\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/kfoADussXA\r\n\r\nЗадержка на 12 тактов:\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/bkamAfUfud\r\n\r\nЗадержка на 14 тактов:\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/TkwzYIBWln\r\n\r\nЗадержка на 15 тактов (проверятся сравнением с этим):\r\n\r\n\r\n\r\nКороткий url: http://play.starmaninnovations.com/varlife/jmgpehYlpT\r\n\r\nИтак, вот каковы основные компоненты схем VarLife! Описания основных схем компьютера см. в следующей части, написанной KZhang!\r\n\r\nЧасть 3: оборудование\r\nБлагодаря нашим знаниям логических шлюзов и общей структуры процессора, мы можем начать разработку всех компонентов компьютера.\r\n\r\nДемультиплексор\r\nДемультиплексор, или demux — критически важный компонент ПЗУ, ОЗУ и АЛУ. В зависимости от заданных данных селектора он направляет входной сигнал на один из нескольких выходных сигналов. Он состоит из трёх основных частей: последовательно-параллельный преобразователь, устройство контроля сигнала и разделитель тактовых сигналов.\r\n\r\nМы начинаем с преобразования последовательных данных селектора в «параллельные». Это выполняется стратегическим разделением и задержкой данных, чтобы самый левый бит данных пересекал тактовый сигна в самом левом квадрате 11x11, следующий бит данных пересекал тактовый сигнал в следующем квадрате 11x11, и так далее.\r\n\r\nХотя каждый бит данных будет выводиться в каждый квадрат 11x11, каждый бит данных будет пересекаться с тактовым сигналом только один раз.\r\n\r\n\r\n\r\nДалее мы проверяем, соответствуют ли параллельные данные заданному адресу.\r\nМы осуществляем это с помощью шлюзов AND и ANT, применяемыми для тактовых и параллельных данных. Однако нам нужно убедиться, что параллельные данные тоже выводятся, чтобы их можно было снова сравнить. Вот шлюзы, которые в результате создал я:\r\n\r\n\r\n\r\nНаконец, мы просто разделяем тактовый сигнал, соединяем несколько устройств проверки сигнала (по одному для каждого адреса/вывода), в результате получая мультиплексор!\r\n\r\n\r\n\r\nПЗУ\r\nПЗУ должно получать в качестве входных данных адрес, а в качестве вывода отправлять инструкцию по этому адресу. Мы начинаем с того, что используем мультиплексор для направления тактового сигнала на одну из инструкций. Затем нам нужно сгенерировать сигнал с помощью касаний нескольких проводников и шлюзов OR. Касания проводников позволяют тактовому сигналу пройти по всем 58 битам инструкции, а также обеспечивают перемещение сгенерированного сигнала (пока параллельного) по ПЗУ на выход.\r\n\r\n\r\n\r\nЗатем нам нужно просто преобразовать параллельный сигнал в последовательный, и на этом ПЗУ будет готово.\r\n\r\n\r\n\r\n\r\n\r\nВ настоящее время ПЗУ генерируется выполнением скрипта на Golly, передающего ассемблерный код из буфера обмена в ПЗУ.\r\n\r\nSRL, SL, SRA\r\nЭти три логических шлюза используются для битового сдвига, и они более сложны, чем обычные AND, OR, XOR, и т.п. Чтобы эти шлюзы работали, нам нужно сначала выполнить задержку тактового сигнала на соответствующее время, чтобы выполнить «сдвиг» данных.\r\nВторой аргумент, передаваемый этим шлюзам, сообщает, на столько бит нужно выполнить смещение.\r\n\r\nДля SL и SRL нам нужно\r\n\r\n\r\nУбедиться, что 12 самых значимых битов не включены (иначе вывод будет равен 0), и\r\nВыполнить задержку данных на нужное время на основании 4 менее значимых битов.\r\n\r\nЭто можно реализовать с помощью нескольких шлюзов AND/ANT и мультиплексора.\r\n\r\n\r\n\r\nSRA немного отличается, потому что при сдвиге нам нужно копировать знаковый бит. Мы выполняем это, применив AND к тактовому сигналу со знаковым битом, а затем скопировав вывод несколько раз с помощью разделителей проводников и шлюзов OR.\r\n\r\n\r\n\r\nТриггер Set-Reset (SR)\r\nМногие функции процессора зависят от способности хранить данные. Мы можем реализовать её с помощью двух красных клеток B12/S1. Две клетки могут поддерживать друг друга во включенном состоянии или же вместе быть выключенными. С помощью дополнительных схем включения, сброса и чтения мы можем создать простой SR-триггер.\r\n\r\n\r\n\r\nСинхронизатор\r\nПреобразовав последовательные данные в параллельные, а затем включив несколько SR-триггеров, мы можем хранить целое слово данных. Затем, чтобы снова извлечь данные, мы можем просто считать и сбросить все триггеры, и соответствующим образом выполнить задержку данных. Это позволит нам хранить одно (или несколько) слов данных, пока мы ждём другое. Благодаря этому мы сможем синхронизировать два слова данных, полученных в разное время.\r\n\r\n\r\n\r\nСчётчик считывания\r\nЭто устройство отслеживает, сколько раз оно должно выполнять адресацию из ОЗУ. Оно решает эту задачу с помощью устройства, похожего на SR-триггер: T-триггера. Каждый раз, когда T-триггер получает входные данные, он меняет состояние: если он был включен, то отключается, и наоборот. Когда T-триггер изменяет своё состояние, он отправляет выходной импульс, который можно передать в другой T-триггер, создав двухбитный счётчик.\r\n\r\n\r\n\r\nДля создания счётчика считывания нам нужно перевести счётчик в подходящий режим адресации с помощью двух шлюзов ANT, и использовать выходной сигнал счётчика для определения того, куда направлять тактовый сигнал: в АЛУ или в ОЗУ.\r\n\r\n\r\n\r\nОчередь считывания\r\nОчередь считывания должна отслеживать, какой из счётчиков считывания отправил входные данные в ОЗУ, чтобы он мог отправить вывод ОЗУ в нужное место. Для этого мы используем несколько SR-триггеров: по одному триггеру на каждый вход. Когда из счётчика считывания передаётся сигнал в ОЗУ, тактовый сигнал разделяется и включает SR-триггер счётчика. Затем вывод ОЗУ проходит вмести с SR-триггером через шлюз AND, а тактовый сигнал из ОЗУ сбрасывает SR-триггер.\r\n\r\n\r\n\r\nАЛУ\r\nАЛУ похожа в работе на очередь считывания в том, что она оно тоже использует SR-триггер для отслеживания того, куда отправлять сигнал. Сначала с помощью мультиплексора включается SR-триггер логической цепи, соответствующей опкоду инструкции. Затем значения первого и второго аргумента вместе с SR-триггером проходят через шлюз AND, а потом передаются в логические цепи. При прохождении тактовый сигнал сбрасывает триггер, так что АЛУ можно использовать снова.\r\n\r\n\r\n\r\nОЗУ\r\nОЗУ стало самой сложной частью этого проекта. Оно требовало очень специфического управления каждым SR-триггером, хранящим данные. Для считывания адрес передаётся в мультиплексор и передаётся в сегменты ОЗУ. Сегменты ОЗУ параллельно выводят хранящиеся данные, которые преобразуются в последовательный вид и выводятся. Для записи адрес передаётся в другой мультиплексор, записываемые данные преобразуются из последовательной в параллельную форму, а сегменты ОЗУ распространяют сигнал по ОЗУ.\r\n\r\nМетапиксель 22x22 каждого сегмента ОЗУ имеет такую структуру:\r\n\r\n\r\n\r\nСоединив всё ОЗУ, мы получим что-то подобное:\r\n\r\n\r\n\r\nСоединяем всё вместе\r\nС помощью всех этих компонентов и общей архитектуре компьютера, описанной в Части 1, мы можем построить работающий компьютер!\r\n\r\nСкачиваемые файлы:\r\n — Готовый компьютер для «Тетриса»\r\n — Скрипт создания ПЗУ, пустой компьютер и компьютер для нахождения простых чисел\r\n\r\n\r\n\r\nЧасть 4: QFTASM и Cogol\r\nОбзор архитектуры\r\nЕсли вкратце, то наш компьютер имеет 16-битную асинхронную гарвардскую архитектуру RISC. При создании процессора вручную архитектура RISC (компьютер с сокращённым набором команд) является практически обязательным требованием. В нашем случае это означает, что количество опкодов мало, и, что гораздо более важно — все инструкции обрабатываются очень похожим образом.\r\n\r\nДля справки — компьютер Wireworld использует transport-triggered architecture, в которой единственной инструкцией является MOV, а вычисления выполняются записью/считыванием специальных регистров. Хотя эта парадигма позволяет создать очень простую в реализации архитектуру, результат оказывается на грани применимости: все арифметические/логические/условные операции требуют трёх инструкций. Было очевидно, что мы хотим создать более понятную архитектуру.\r\n\r\nЧтобы оставить наш процессор простым, в то же время повысив удобство его использования, мы приняли несколько важных решений относительно его конструкции:\r\n\r\n\r\nНикаких регистров. Каждый адрес в ОЗУ считается равным и может использоваться как аргумент в любой операции. В каком-то смысле это значит, что всё ОЗУ можно считать регистрами. Это означает отсутствие специальных инструкций загрузки/хранения.\r\nТо же самое касается распределения памяти. Всё, что может записываться или считываться, имеет общую унифицированную схему адресации. Это значит, что счётчик команд (program counter, PC) является адресом 0, а единственная разница между обычными и управляющими инструкциями заключается в том, что управляющие используют адрес 0.\r\nДанные последовательны при передаче и параллельны при хранении. Из-за «электронной» природы нашего компьютера, сложение и вычитание реализовать значительно проще, когда данные передаются последовательно в порядке little-endian (первым идёт наименее значимый бит). Более того, последовательные данные позволяют избавиться от громоздких шин данных, которые очень широки и неудобны для правильной работы со временем (чтобы данные находились вместе, все «полосы» шины должны иметь одинаковую временную задержку).\r\nГарвардская архитектура, то есть существует разделение между памятью программ (ПЗУ) и памятью данных (ОЗУ). Хоть это и снижает гибкость процессора, но помогает оптимизировать размер: длина программы намного больше, чем нужное нам количество ОЗУ, поэтому мы можем разделить программу в ПЗУ и затем сосредоточиться на сжатии ПЗУ, что гораздо проще выполнить, когда она «только для чтения».\r\n16-битная разрядность данных. Это наименьшая степень двойки, которая шире стандартного поля для «Тетриса» (10 блоков). Это даёт нам диапазон данных от -32768 до +32767 и максимальную длину программы в 65536 инструкций. (2^8=256 инструкций достаточно для большинства простых вещей, которые можно реализовать в выдуманном процессоре, но никак не для «Тетриса».)\r\nАсинхронный дизайн. Вместо центрального тактового генератора (или, что аналогично, нескольких генераторов), задающего время компьютера, все данные сопровождаются «тактовым сигналом», передающимся параллельно с данными при их перемещении в компьютере. Некоторые пути могут быть короче других, и это может вызывать сложности в дизайне с центральным тактовым генератором, но асинхронная конструкция может запросто справляться с операциями с переменным временем.\r\nВсе инструкции имеют одинаковый размер. Мы посчитали, что архитектура, в которой каждая инструкция имеет 1 опкод с тремя операндами (значание, значение, целевой адрес) будет наиболее гибким вариантом. Они включают в себя операции с двоичными данными, а также условные переходы.\r\nПрострая система режимов адресации. Наличие множества режимов адресации очень полезно для поддержки таких вещей, как массивы или рекурсия. Нам удалось с помощью относительно простой системы реализовать несколько важных режимов адресации.\r\n\r\nИллюстрация нашей архитектуры приведена в Части 1.\r\n\r\nРабота и операции АЛУ\r\nПосле этого нужно было определиться, какие функции должен иметь наш процессор. Особое внимание стоило уделить простоте реализации и универсальности каждой команды.\r\n\r\nУсловные перемещения\r\n\r\nУсловные перемещения очень важны, они служат для маломасштабного и крупномасштабного управления. «Маломасштабное» — это способность управлять выполнением конкретным перемещением данных, а «крупномасштабное» относится к их использованию в качестве операции условного перехода для передачи управления любому произвольному фрагменту кода. У процессора нет специальных операций перехода, потому что из-за распределения памяти условное перемещение может и копировать данные в обычную ОЗУ, и копировать адрес назначения в счётчик команд (PC). Также мы решили отказаться и от безусловных перемещений, и от безусловных переходов по схожей причине: обе эти операции могут быть реализованы как условные перемещения, в котором условие всегда имеет значение TRUE.\r\n\r\nМы решили использовать два типа условных перемещений: «переместиться, если не ноль» (MNZ) и «переместиться, если меньше ноля» (MLZ). Функционально MNZ сводится к проверке, является ли любой бит данных равным 1, а MLZ — к проверке, имеет ли знаковый бит значение 1. Соответственно, они полезны для проверок равенства и сравнений. Мы выбрали эти два перемещения потому, что «переместиться, если ноль» (MEZ) должен был создавать из пустого сигнала сигнал TRUE, а «переместиться, если больше ноля» (MGZ) — это более сложная проверка, требующая, чтобы знаковый бит был равен 0 и при этом хотя бы один другой бит был равен 1.\r\n\r\nАрифметика\r\n\r\nСледующими по важности инструкциями при принятии решения о дизайне процессора стали основные арифметические операции. Как упомянуто выше, мы используем последовательные данные little-endian, а выбор endian определялся простотой операций сложения/вычитания. При получении первым наименее значимого бита арифметические устройства могут легче отслеживать бит переноса.\r\n\r\nМы решили использовать для отрицательных чисел вид с дополнительным кодом, чтобы сделать сложение и вычитание более целостными. Стоит заметить, что в компьютере Wireworld используется обратный код.\r\n\r\nСложение и вычитание — удел нативной поддержки арифметики нашего процессора (кроме битовых сдвигов, которые мы рассмотрим позже). Другие операции, например, умножение, слишком сложны и не могут выполняться в нашей архитектуре, и должны реализовываться программно.\r\n\r\nБитовые операции\r\n\r\nКак можно догадаться, у нашего процессора есть инструкции AND, OR и XOR. Вместо инструкции NOT мы решили использовать инструкцию «and-not» (ANT). Сложность с инструкцией NOT снова в том, что она должна создавать сигнал при его отсутствии, что сложно для клеточных автоматов. Инструкция ANT возвращает 1 только если первый битовый аргумент 1, а первый битовый аргумент — 0. То есть NOT x аналогично ANT -1 x (а также XOR -1 x). Более того, ANT универсальней и имеет основное преимущество при наложении маски: в случае программы для «Тетриса» мы будем использовать её для удаления тетромино.\r\n\r\nБитовый сдвиг\r\n\r\nОперации битового сдвига — это самые сложные операции, обрабатываемые АЛУ. Они получают два входных значения: сдвигаемое значение и величину сдвига. Несмотря на их сложность (из-за переменной величины сдвига), эти операции критичны для многих важных задач, в том числе для «графических» операций, используемых в «Тетрисе». Битовые сдвиги также служат основой эффективных алгоритмов умножения/деления.\r\n\r\nУ нашего процессора есть три операции битового сдвига — «сдвиг влево» (SL), «логический сдвиг влево» (SRL) и «арифметический сдвиг вправо» (SRA). Два первых битовых сдвига (SL и SRL) заполняют новые биты нолями (это значит, что сдвинутое вправо отрицательное число больше не будет отрицательным). Если второй аргумент сдвига находится вне интервала от 0 до 15, то, как можно догадаться, результатом будут одни ноли. Для последнего битового сдвига, SRA, битовый сдвиг сохраняет знак входных данных, а потому действует как истинное деление на два.\r\n\r\nКонвейер инструкций\r\nНастало время поговорить о некоторых базовых подробностях архитектуры. Каждый цикл ЦП состоит из следующих пяти этапов:\r\n\r\n1. Получение текущей инструкции из ПЗУ\r\n\r\nТекущее значение PC используется для получения соответствующей инструкции из ПЗУ. Каждая инструкция имеет один опкод и три операнда. Каждый операнд состоит из одного слова данных и одного режима адресации. Эти части при считывании из ПЗУ отделяются друг от друга.\r\n\r\nОпкод — это 4 бита, чтобы была возможность поддерживать 16 уникальных опкодов, 11 из которых назначены:\r\n\r\n0000 MNZ Move if Not Zero\r\n0001 MLZ Move if Less than Zero\r\n0010 ADD ADDition\r\n0011 SUB SUBtraction\r\n0100 AND bitwise AND\r\n0101 OR bitwise OR\r\n0110 XOR bitwise eXclusive OR\r\n0111 ANT bitwise And-NoT\r\n1000 SL Shift Left\r\n1001 SRL Shift Right Logical\r\n1010 SRA Shift Right Arithmetic\r\n1011 unassigned\r\n1100 unassigned\r\n1101 unassigned\r\n1110 unassigned\r\n1111 unassigned\r\n\r\n2. Запись результата (при необходимости) предыдущей инструкции в ОЗУ\r\n\r\nВыполнение записи зависит от состояния предыдущей инструкции (например, от значения первого аргумента условного перемещения). Адрес записи определяется третьим операндом предыдущей инструкции.\r\n\r\nВажно заметить, что запись выполняется после получения инструкции. Это приводит к созданию слота задержки перехода, в котором инструкция выполняется сразу после инструкции ветвления (любой операции, выполняющей запись в PC) вместо первой инструкции целевого адреса ветвления.\r\n\r\nВ некоторых случаях (например, при безусловных переходах), от слота задержки перехода можно избавиться оптимизацией. В других случаях это невозможно и инструкцию после ветвления нужно оставить пустой. Более того, такой тип слота задержки должен использовать целевой адрес ветвления, который на 1 адрес меньше самой целевой инструкции, чтобы учесть выполняемый инкремент PC.\r\n\r\nЕсли вкратце, то поскольку вывод предыдущей инструкции записывается в ОЗУ после получения следующей инструкции, после условных переходов должна идти пустая инструкция. В противном случае PC не обновится для перехода правильно.\r\n\r\n3. Считывание данных для аргументов текущей инструкции из ОЗУ\r\n\r\nКак упомянуто выше, каждый из трёх операндов состоит и из слова данных, и из режима адресации. Слово данных равно 16 битам, той же разрядности, что и ОЗУ. Режим адресации занимает 2 бита.\r\n\r\nРежимы адресации могут быть источником значительного усложнения для таких процессоров, потому что во многих режимах адресации в реальном мире требуются многоэтапные вычисления (например, прибавление смещений). В то же самое время гибкие режимы адресации играют важную роль в удобстве пользования процессором.\r\n\r\nМы стремились унифицировать концепции использования жёстко заданных чисел в качестве операндов и применения в качестве операндов адресов данных. Это привело к созданию режимов адресации на основе счётчиков: режим адресации операнда — это просто число, определяющее, сколько раз данные должны передаваться в цикле считывания ОЗУ. В них входят непосредственная, прямая, непрямая и двойная непрямая адресация.\r\n\r\n00 непосредственная: жёстко заданное значение. (нет считывания из ОЗУ)\r\n01 прямая: считывает данные из этого адреса ОЗУ. (одно считывание из ОЗУ)\r\n10 непрямая: считывает данные из адреса, заданного в этом адресе. (два считывания из ОЗУ)\r\n11 двойная непрямая: считывает данные из адреса, заданного в адресе, заданного этим адресом. (три считывания из ОЗУ)\r\n\r\nПосле выполнения расшифровки ссылки три операнда инструкции получают различные роли. Первый операнд — обычно первый аргумент для двоичного оператора, но также он служит условием, когда текущая инструкция является условным перемещением. Второй операнд служит вторым аргументом двоичного оператора. Третий оператор служит адресом назначения для результата инструкции.\r\n\r\nПоскольку две первых инструкции служат данными, а третий — адресом, режимы адресации имеют слегка отличающиеся интерпретации в зависимости от позиции, в которой они используются. Например, прямой режим используется для считывания данных из фиксированного адреса ОЗУ (потому что требуется одно считывание из ОЗУ), но непосредственный режим используется для записи данных в фиксированный адрес ОЗУ (потому что не требуется ни одного считывания из ОЗУ).\r\n\r\n4. Вычисление результат\r\n\r\nОпкод и два его первых операнда отправляются в АЛУ для выполнения двоичной операции. Для арифметических, битовых и сдвиговых операций это означает выполнение соответствующей операции. Для условных перемещений это означает простой возврат второго операнда.\r\n\r\nОпкод и первый операнд используются для вычисления условия, определяющего, нужно ли записывать результат в память. В случае условных перемещений это означает, что либо нужно определить, равен ли какой-нибудь из битов операнда 1 (для MNZ), либо нужно определить, равен ли знаковый бит 1 (для MLZ). Если опкод не является условным перемещением, то запись выполняется всегда (условие всегда истинно).\r\n\r\n5. Инкремент счётчика команд\r\n\r\nЗатем, наконец, считывается, увеличивается и записывается значение счётчика команд.\r\n\r\nИз-за того, что инкремент PC расположен между считыванием инструкции и записью инструкции, инструкция, увеличивающая значение PC на 1 является пустой (no-op). Инструкция, копирующая PC в самого себя, приводит к выполнению следующей инструкции два раза подряд. Но стоит учитывать, что если не уделять внимание конвейеру инструкций, то несколько инструкций PC подряд могут привести к комплексным эффектам, в том числе бесконечному зацикливанию.\r\n\r\nОдиссея по созданию ассемблера для «Тетриса»\r\nМы создали для нашего процессора новый язык ассемблера QFTASM. Этот ассемблерный язык один в один соответствует машинному коду в ПЗУ компьютера.\r\n\r\nЛюбая программа на QFTASM записывается построчной серией инструкций. Каждая строка форматируется следующим образом:\r\n\r\n[номер строки] [опкод] [арг1] [арг2] [арг3]; [необязательный комментарий]\r\n\r\nСписок опкодов\r\n\r\nКак сказано выше, компьютером поддерживаются одиннадцать опкодов, каждый из которых имеет три операнда:\r\n\r\nMNZ [проверка] [значение] [адрес назначения] – перемещение, если не ноль; задаёт [адрес назначения] для [значения], если [проверка] не равна нолю.\r\nMLZ [проверка] [значение] [адрес назначения] – перемещение, если меньше ноля; задаёт [адрес назначения] [значению], если [проверка] не меньше ноля.\r\nADD [значение1] [значение2] [адрес назначения] – сложение; сохраняет [значение1] + [значение2] в [адресе назначения].\r\nSUB [значение1] [значение2] [адрес назначения] – вычитание; сохраняет [значение1] - [значение2] в [адресе назначения].\r\nAND [значение1] [значение2] [адрес назначения] – битовое И; сохраняет [значение1] & [значение] в [адресе назначения].\r\nOR [значение1] [значение2] [адрес назначения] – битовое ИЛИ; сохраняет [значение1] | [значение2] в [адресе назначения].\r\nXOR [значение1] [значение2] [адрес назначения] – битовое XOR; сохраняет [значение1] ^ [значение2] в [адресе назначения].\r\nANT [значение1] [значение2] [адрес назначения] – битовое И-НЕ; сохраняет [значение1] & (![значение2]) в [адресе назначения].\r\nSL [значение1] [значение2] [адрес назначения] – сдвиг влево; сохраняет [значение1] << [значение2] в [адресе назначения].\r\nSRL [значение1] [значение2] [адрес назначения] – логический сдвиг вправо; сохраняет [значение1] >>> [значение2] в [адресе назначения]. Не сохраняет знак.\r\nSRA [значение1] [значение2] [адрес назначения] – арифметический сдвиг вправо; сохраняет [значение1] >> [значение2] в [адресе назначения] с сохранением знака.\r\n\r\nРежимы адресации\r\n\r\nКаждый из операндов содержит и значение данных, и режим адресации. Значение данных описывается десятичным числом в интервале от -32768 до 65536. Режим адресации описывается однобуквенным префиксом к значению данных.\r\n\r\nрежим название префикс\r\n0 непосредственный (нет)\r\n1 прямой A\r\n2 непрямой B\r\n3 двойной непрямой C\r\n\r\nПример кода\r\n\r\nЧисла Фибоначчи в пяти строках:\r\n\r\n0. MLZ -1 1 1; начальное значение\r\n1. MLZ -1 A2 3; начало цикла, сдвиг данных\r\n2. MLZ -1 A1 2; сдвиг данных\r\n3. MLZ -1 0 0; конец цикла\r\n4. ADD A2 A3 1; слот задержки перехода, вычисление следующего члена\r\n\r\nЭтот код вычисляет ряд чисел Фибоначчи, в адресе ОЗУ 1 содержится текущий член. После 28657 он быстро переполняется.\r\n\r\nКод Грея:\r\n\r\n0. MLZ -1 5 1; начальное значение адреса ОЗУ для записи\r\n1. SUB A1 5 2; начало цикла, определение двоичного числа для преобразования в код Грея\r\n2. SRL A2 1 3; сдвиг вправо на 1\r\n3. XOR A2 A3 A1; XOR и сохранение кода Грея в адресе назначения\r\n4. SUB B1 42 4; берём код Грея и вычитаем 42 (101010)\r\n5. MNZ A4 0 0; если результат не равен нолю (код Грея != 101010), повторить цикл\r\n6. ADD A1 1 1; слот задержки перехода, инкремент адреса назначения\r\n\r\nЭта программа вычисляет код Грея и хранит код в последовательных адресах, начиная с адреса 5. В программе используется несколько полезных особенностей, например, непрямая адресация и условный переход. Она прекращается только когда получившийся код Грея равен 101010, что происходит при вводе 51 по адресу 56.\r\n\r\nОнлайн-интерпретатор\r\nEl'endia Starman создал очень полезный онлайн-интерпретатор. В нём можно пошагово выполнять код, устанавливать контрольные точки, вручную выполнять запись в ОЗУ и визуализировать состояние ОЗУ на экране.\r\n\r\nCogol\r\nПосле выбора архитектуры и языка ассемблера следующим шагом в «программной» стороне проекта будет создание высокоуровневого языка, подходящего для «Тетриса». Поэтому я создал Cogol. Название является и каламбуром от «COBOL», и аббревиатурой «C of Game of Life», хотя и стоит заметить, что Cogol по сравнению с C — то же самое, что наш компьютер по сравнению с реальным.\r\n\r\nCogol существует всего на один уровень выше языка ассемблера. В целом, большинство строк программы на Cogol соответствуют строкам на ассемблере, но у языка есть несколько важных особенностей:\r\n\r\n\r\nОсновные возможности включают в себя именованные переменные с присвоением и операторы с более читаемым синтаксисом. Например, ADD A1 A2 3 превращается в z = x + y;. Компилятор привязывает переменные к адресам.\r\nКонструкции циклов, такие как if(){}, while(){} и do{}while(); позволяют компилятору обрабатывать ветвление.\r\nОдномерные массивы (с арифметикой указателей), которые используются для поля «Тетриса».\r\nПодпрограммы и стек вызовов. Они используются, чтобы избежать дублироания больших фрагментов кода и для поддержки рекурсии.\r\n\r\nКомпилятор (который я написал с нуля) очень прост/наивен, но я постарался вручную оптимизировать некоторые конструкции языка, чтобы достичь малой длины скомпилированных программ.\r\n\r\nВот краткий обзор работы различных особенностей языка:\r\n\r\nТокенизация\r\n\r\nИсходный код линейно токенизируется (за один проход) на основании простых правил о том, какие символы могут соседствовать в токене. Когда обнаруживается символ, который не может быть соседним с последним символом текущего токена, текущий токен считается завершённым, а новый символ начинает новый токен. Некоторые символы (например, { или ,) не могут соседствовать ни с какими другими, потому сами являются отдельными токенами. Другие (например, > или =) могут соседствовать только сами с собой, то есть могут создавать такие токены, как >>> или ==. Символы пробелов принудительно выставляют границы между токенами, но сами в результат не включаются. Самый сложный для токенизации символ — это -, потому что он может обозначать и вычитание, и унарное отрицание, а потому требует особой обработки.\r\n\r\nПарсинг\r\n\r\nПарсинг тоже выполняется за один проход. В компиляторе есть методы обработки каждой из конструкций языка, и после передачи различным методам компилятора токены извлекаются из глобального списка токенов. Если компилятор обнаруживает неожиданный токен, то выдаёт синтаксическую ошибку.\r\n\r\nРаспределение глобальной памяти\r\n\r\nКомпилятор назначает каждой глобальной переменной (слову или массиву) собственный адрес (адреса) в ОЗУ. Все переменные необходимо объявлять с помощью ключевого слова my, чтобы компилятор знал, что нужно выделить для них место. Гораздо круче, чем именованные глобальные перменные — это управление памятью временных адресов. Многим инструкциям (в частности условным операторам и многим операциям доступа к массивам) требуются «временные» адреса для хранения промежуточных вычислений. В процессе компиляции компилятор при необходимости выделяет и освобождает временные адреса. Если компилятору нужно больше временных адресов, он выделят под них больше ОЗУ. Полагаю, что обычно программы используют всего несколько временных адресов, при этом каждый адрес используется много раз…\r\n\r\nКонструкции IF-ELSE\r\n\r\nКонструкции if-else имеют стандартный для C синтаксис:\r\n\r\nдругой код\r\nif (cond) {\r\n первое тело\r\n} else {\r\n второе тело\r\n}\r\nдругой код\r\n\r\nПри преобразовании в QFTASM код получает следующую структуру:\r\n\r\nдругой код\r\nпроверка условия\r\nусловный переход\r\nпервое тело\r\nбезусловный переход\r\nвторое тело (место условного перехода)\r\nдругой код (место безусловного перехода)\r\n\r\nЕсли выполняется первое тело, то второе пропускается. Если первое тело пропускается, то выполняется второе.\r\n\r\nВ ассемблере «проверка условия» обычно бывает обычным вычитанием, и знак результата определяет, нужно ли совершить переход или выполнить тело. Для обработки таких неравенств, как > или <= используется инструкция MLZ. Инструкция MNZ используется для обработки ==, потому что она выполняет переход через тело, когда разность не равна нулю (то есть когда аргументы неравны). Условия с несколькими выражениями пока не поддерживаются.\r\n\r\nЕсли конструкция else отсутствует, то безусловный переход тоже опускается, и код на QFTASM выглядит так:\r\n\r\nдругой код\r\nпроверка условия\r\nусловный переход\r\nтело\r\nдругой код (место условного перехода)\r\n\r\nКонструкции WHILE\r\n\r\nКонструкции while тоже имеют стандартный для C синтаксис:\r\n\r\nдругой код\r\nwhile (условие) {\r\n тело\r\n}\r\nдругой код\r\n\r\nПри преобразовании в QFTASM код имеет такую схему:\r\n\r\nдругой код\r\nбезусловный переход\r\nтело (место условного перехода)\r\nпроверка условия (место безусловного перехода)\r\nусловный переход\r\nдругой код\r\n\r\nПроверка условия и условный переход находятся в конце блока, и это значит, что они заново выполняются после каждого выполнения блока. Когда условие возвращает false, тело не выполняется и цикл заканчивается. Во время начала выполнения цикла поток управления перескакивает через тело цикла к коду условия, поэтому если в первый раз условие ложно, то тело никогда не выполняется.\r\n\r\nИнструкция MLZ используется для обработки неравенств вида > или <=. В отличие от выполнения конструкций if, инструкция MNZ используется для обработки !=, потому что она переходит к телу, когда разность не равна нулю (то есть когда аргументы неравны).\r\n\r\nКонструкции DO-WHILE\r\n\r\nЕдинственная разница между while и do-while заключается в том, что тело цикла do-while в первый раз не обходится, поэтому оно всегда выполняется хотя бы один раз. Обычно я использую конструкции do-while для экономии пары строк ассемблерного кода, когда точно знаю, что цикл никогда не придётся пропускать полностью.\r\n\r\nМассивы\r\n\r\nОдномерные массивы реализованы как смежные блоки памяти. Все массивы имеют фиксированную длину, зависящую от объявления. Массивы объявляются следующим образом:\r\n\r\nmy alpha[3]; # пустой массив\r\nmy beta[11] = {3,2,7,8}; # в первые четыре элемента заранее записываются эти значения\r\n\r\nВот возможное распределение ОЗУ для массива, показывающее, что для него зарезервированы адреса 15-18:\r\n\r\n15: alpha\r\n16: alpha[0]\r\n17: alpha[1]\r\n18: alpha[2]\r\n\r\nАдреса, помеченные как alpha, заполняются указателем на местонахождение alpha[0], так что в этом случае адрес 15 содержит значение 16. Переменную alpha возможно использовать внутри кода Cogol как указатель стека, если необходимо использовать этот массив как стек.\r\n\r\nДоступ к элементам массива выполняется с помощью стандартной записи array[index]. Если значение index является константой, то эта ссылка автоматически заполняется абсолютным адресом элемента. В противном случае она выполняет арифметику указателей (просто сложение) для нахождения нужного абсолютного адреса. Возможно также встроенное индексирование, например alpha[beta[1]].\r\n\r\nПодпрограммы и вызовы\r\n\r\nПодпрограммы — это блоки кода, которые можно вызывать из различных контекстов, они позволяют избежать дублирования кода и создавать рекурсивные программы. Вот пример программы с рекурсивной подпрограммой для генерирования чисел Фибоначчи (самый медленный алгоритм):\r\n\r\n# рекурсивное вычисление десятого числа Фибоначчи\r\ncall display = fib(10).sum;\r\nsub fib(cur,sum) {\r\n if (cur <= 2) {\r\n sum = 1;\r\n return;\r\n }\r\n cur--;\r\n call sum = fib(cur).sum;\r\n cur--;\r\n call sum += fib(cur).sum;\r\n}\r\n\r\nПодпрограмма объявляется ключевым словом sub и может быть расположена в любом месте программы. В каждой подпрограмме может быть несколько локальных переменных, каждая из которых объявляется как часть её списка аргументов. Таким аргументам также задаются значения по умолчанию.\r\n\r\nДля обработки рекурсивных вызовов локальные переменные подпрограммы хранятся в стеке. Последняя статичная переменная в ОЗУ является указателем стека вызовов, а вся память после неё служит стеком вызовов. При вызове подпрограммы она создаёт в стеке вызовов новый кадр, в который включаются все локальные переменные и адрес возврата (ПЗУ). Каждой подпрограмме в программе передаётся один статичный адрес ОЗУ, служащий указателем. Этот указатель задаёт местоположение «текущего» вызова подпрограммы в стеке вызовов. Выполнение ссылок на локальную переменную выполняется с помощью значения этого статичного указателя плюс смещения, чтобы задать адрес этой конкретной локальной переменной. Также в стеке вызовов содержится предыдущее значение статичного указателя. Вот распределение переменных для статичной ОЗУ и кадра вызовов подпрограммы для приведённой выше программы:\r\n\r\nRAM map:\r\n0: pc\r\n1: display\r\n2: scratch0\r\n3: fib\r\n4: scratch1\r\n5: scratch2\r\n6: scratch3\r\n7: call\r\n\r\nfib map:\r\n0: return\r\n1: previous_call\r\n2: cur\r\n3: sum\r\n\r\n\r\nИнтересный аспект подпрограмм заключается в том, что они не возвращают никаких конкретных значений. После выполнения подпрограммы можно считывать все её локальные переменные, поэтому из вызова подпрограммы можно извлечь множество данных. Это реализуется хранением указателя для этого конкретного вызова подпрограммы, который можно затем использовать для восстановления всех локальных переменных из (недавно освобождённого) кадра стека.\r\n\r\nПодпрограмму можно вызвать несколькими способами, все они используют ключевое слово call:\r\n\r\ncall fib(10); # выполняется подпрограмма, никакого возвращаемого значения не сохраняется\r\n\r\ncall pointer = fib(10); # выполняется подпрограмма и возвращается указатель\r\ndisplay = pointer.sum; # доступ к локальной переменной и её присвоение глобальной переменной\r\n\r\ncall display = fib(10).sum; # немедленное сохранение возвращаемого значения\r\n\r\ncall display += fib(10).sum; # с возвращаемым значением можно также использовать другие виды операторов присвоения\r\n\r\nДля вызова подпрограммы можно задать в качестве аргументов любое количество значений. Все неуказанные аргументы будут заполнены их значениями по умолчанию (если они есть). Если аргумент не указан и не имеет очищенного значения по умолчанию (для экономии инструкций/временит), то может получить в начале подпрограммы любое значение.\r\n\r\nУказатели — это способ доступа к нескольким локальным переменным подпрограммы, однако важно заметить, что этот указатель не только является временным: при выполнении другого вызова подпрограммы данные, на которые указывает указатель, будут уничтожены.\r\n\r\nМетки отладки\r\n\r\nЛюбому блоку {...} в программе на Cogol может предшествовать метка описания из нескольких слов. Эта метка присоединяется к скомпилированному ассемблерному коду в качестве комментария, и может быть очень полезной для отладки, потому что она упрощает поиск нужных фрагментов кода.\r\n\r\nОптимизация слотов задержки перехода\r\n\r\nДля повышения скорости скомпилированного кода компилятор Cogol выполняет в качестве последнего прохода по коду QFTASM очень простую оптимизацию слотов задержки перехода. Для любого безусловного перехода с пустым слотом задержки перехода слот задержки может быть заполнен первой инструкцией адрес перехода, а адрес перехода увеличивается на единиц, чтобы указывать на следующую инструкцию. Обычно это экономит один цикл при каждом выполнении безусловного перехода.\r\n\r\nНаписание кода «Тетриса» на Cogol\r\nГотовая программа «Тетриса» была написана на Cogol, и её исходный код доступен здесь. Скомпилированный код QFTASM доступен здесь. Для удобства постоянная ссылка указана здесь: Tetris in QFTASM. Поскольку нашей целью было создание ассемблерного кода (а не кода на Cogol), получившийся код на Cogol довольно громоздок. Многие части программы должны быть расположены в подпрограммах, но эти подпрограммы на самом деле так коротки, что дублирование кода экономит больше инструкций, чем конструкции call. Готовый код в дополнение к основному коду содержит всего одну подпрограмму. Кроме того, многие массивы были удалены и заменены либо на список отдельных переменных аналогичной длины, или на множество жёстко заданных в программе чисел. Готовый скомпилированный код на QFTASM содержит менее 300 инструкций, хотя он и немного длиннее, чем сам исходник на Cogol.\r\n\r\nЧасть 5: сборка, трансляция и будущее\r\nПолучив от компилятора ассемблерную программу, мы можем приступить к сборке ПЗУ для компьютера Varlife и трансляции всего в большой паттерн игры «Жизнь»!\r\n\r\nСборка\r\nСборка ассемблерной программы в ПЗУ выполняется почти так же, как в традиционном программировании: каждая инструкция транслируется в двоичный аналог, а затем все они конкатенируются в один большой двоичный объект, называемый исполняемым файлом. Для нас единственная разница заключается в том, что двоичный объект должен транслироваться в цепи и подсоединиться к компьютеру.\r\n\r\nK Zhang написал CreateROM.py, скрипт на Python для Golly, который выполняет сборку и трансляцию. Он довольно прост: скрипт получает из буфера обмена ассемблерную программу, собирает её в двоичный файл и транслирует его в цепь. Вот пример программы проверки простоты, включённой в состав скрипта:\r\n\r\n#0. MLZ -1 3 3;\r\n#1. MLZ -1 7 6; preloadCallStack\r\n#2. MLZ -1 2 1; beginDoWhile0_infinite_loop\r\n#3. MLZ -1 1 4; beginDoWhile1_trials\r\n#4. ADD A4 2 4;\r\n#5. MLZ -1 A3 5; beginDoWhile2_repeated_subtraction\r\n#6. SUB A5 A4 5;\r\n#7. SUB 0 A5 2;\r\n#8. MLZ A2 5 0;\r\n#9. MLZ 0 0 0; endDoWhile2_repeated_subtraction\r\n#10. MLZ A5 3 0;\r\n#11. MNZ 0 0 0; endDoWhile1_trials\r\n#12. SUB A4 A3 2;\r\n#13. MNZ A2 15 0; beginIf3_prime_found\r\n#14. MNZ 0 0 0;\r\n#15. MLZ -1 A3 1; endIf3_prime_found\r\n#16. ADD A3 2 3;\r\n#17. MLZ -1 3 0;\r\n#18. MLZ -1 1 4; endDoWhile0_infinite_loop\r\n\r\nОна преобразуется в следующий двоичный файл:\r\n\r\n0000000000000001000000000000000000010011111111111111110001\r\n0000000000000000000000000000000000110011111111111111110001\r\n0000000000000000110000000000000000100100000000000000110010\r\n0000000000000000010100000000000000110011111111111111110001\r\n0000000000000000000000000000000000000000000000000000000000\r\n0000000000000000000000000000000011110100000000000000100000\r\n0000000000000000100100000000000000110100000000000001000011\r\n0000000000000000000000000000000000000000000000000000000000\r\n0000000000000000000000000000000000110100000000000001010001\r\n0000000000000000000000000000000000000000000000000000000001\r\n0000000000000000000000000000000001010100000000000000100001\r\n0000000000000000100100000000000001010000000000000000000011\r\n0000000000000001010100000000000001000100000000000001010011\r\n0000000000000001010100000000000000110011111111111111110001\r\n0000000000000001000000000000000000100100000000000001000010\r\n0000000000000001000000000000000000010011111111111111110001\r\n0000000000000000010000000000000000100011111111111111110001\r\n0000000000000001100000000000000001110011111111111111110001\r\n0000000000000000110000000000000000110011111111111111110001\r\n\r\nПри трансляции в цепи Varlife он выглядит вот так:\r\n\r\n\r\n\r\n\r\n\r\nЗатем ПЗУ соединяется с компьютером, в результате чего получается полностью функциональная программа в Varlife. Но мы ещё не закончили…\r\n\r\nТрансляция в игру «Жизнь»\r\nВсё это время мы работали над различными слоями абстракции поверх игры «Жизнь». Но теперь настала пора стянуть занавес абстракции и транслировать нашу работу в паттерн игры «Жизнь». Как сказано ранее, мы используем в качестве основы Varlife OTCA-метапиксель. Поэтому последним шагом будет преобразование каждой клетки Varlife в метапиксель игры «Жизнь».\r\n\r\nК счастью, в Golly есть скрипт (metafier.py), который может преобразовывать с помощью OTCA-метапикселей паттерны из различных правил в паттерны игры «Жизнь». К сожалению, он способен только преобразовывать паттерны с одним глобальным набором правил, поэтому не работает в Varlife. Для решения этой проблемы я написал модифицированную версию, поэтому правило для каждого метапикселя генерируется для Varlife на поклеточном основании.\r\n\r\nИтак, наш компьютер (с ПЗУ «Тетриса») имеет граничный прямоугольник 1 436 x 5 082. Из 7 297 752 клеток этого прямоугольника 6 075 811 пусты, то есть популяция составляет 1 221 941 клеток. Каждая из этих клеток должна быть транслирована в OTCA-метапиксель, имеющий граничный прямоугольник 2048 x 2048 с популяцией, равной или 64 691 (для метапикселя в состоянии «включено») или 23 920 (для состояния «выключено»). Это значит, что конечный результат будет иметь граничный прямоугольник 2 940 928 x 10 407 936 (плюс несколько тысяч для границ метапикселей) с популяцией в пределах от 29 228 828 720 до 79 048 585 231. При 1 бите на одну живую клетку для представления всего компьютера и ПЗУ требуется 27-74 гибибайт.\r\n\r\nЯ изложил эти вычисления только потому, что пренебрёг ими перед запуском скрипта, и очень быстро столкнулся с нехваткой памяти на своём компьютере. После панического выполнения команды kill я внёс модификацию в скрипт metafier. Через каждые 10 строк метапикселей паттерн сохраняется на диск (как сжатый gzip файл RLE), после чего сетка очищается. Это увеличивает время выполнения трансляции и занимает больше места на диске, зато уровень использования памяти остаётся в приемлемых границах. Golly использует расширенный формат RLE, в который включено расположение паттерна, поэтому это не добавляет сложности к загрузке паттерна — просто нужно открыть все файлы паттернов в одном слое.\r\n\r\nНа основе моей работы K Zhang создал улучшенный скрипт metafier, в котором используется формат файлов MacroCell, более эффективный при загрузке больших паттернов, чем RLE. Этот скрипт работает значительно быстрее (всего несколько секунд, в отличие от нескольких часов исходного скрипта metafier), создаёт гораздо меньше выходных данных (121 КБ вместо 1,7 ГБ), и может преобразовать весь компьютер и ПЗУ в метапиксели одним махом, не занимая огромный объём памяти. В нём используется тот факт, что файлы MacroCell кодируют описывающие паттерны деревья. Метапиксели с помощью специального файла шаблона загружаются в дерево и после определённых вычислений и модификаций к нему можно просто присоединить паттерн Varlife.\r\n\r\nФайл паттернов всего компьютера и ПЗУ в игре «Жизнь» можно взять здесь.\r\n\r\nБудущее проекта\r\nИтак, мы сделали «Тетрис», и на этом всё закончено, правда? Ничего подобного. У нас есть для этого проекта и другие цели, над которыми мы работаем:\r\n\r\n\r\nmuddyfish и Kritixi Lithos продолжают работу над высокоуровневым языком, компилируемым в QFTASM.\r\nEl'endia Starman работает над обновлениями онлайн-интерпретатора QFTASM.\r\nquartata работает над GCC-бэкендом, который позволить с помощью GCC выполнять компиляцию независимого кода на C и C++ (а возможно и на других языках, например, Fortran, D или Objective-C) в QFTASM. Это позволит создавать более сложные программы на более знакомом языке, хоть и без стандартной библиотеки.\r\nОдно из самых серьёзных препятствий, которые нам нужно преодолеть, чтобы двигаться дальше, заключается в том, что наши инструменты не могут создавать позиционно-независимый код (PIC) (т.е. относительные переходы). Без PIC мы не можем использовать ссылки, то есть не можем воспользоваться преимуществами компоновки с готовыми библиотеками. Мы работаем над поиском способа правильной реализации PIC.\r\nМы размышляем над следующей программой, которую стоит написать для компьютера QFT. Пока хорошей целью для нас выглядит Pong.\r\n\r\nЧасть 6: новый компилятор для QFTASM\r\nХотя языка Cogol и достаточно рудиментарной реализации «Тетриса», он слишком простой и низкоуровневый для программирования широкого назначения на хорошо читаемом уровне.\r\n\r\nМы начали работу над новым языком в сентябре 2016 года. Процесс развития языка шёл медленно из-за трудно понимаемых, как и в реальной жизни, ошибок.\r\n\r\nМы создали низкоуровневый язык с похожим на Python синтаксисом, включая простую систему типов, подпрограммы с поддержкой рекурсии и операторы встраивания.\r\n\r\nКомпилятор из текста в QFTASM был создан на четыре этапа: токенизатор, дерево грамматики, высокоуровневый компилятор и низкоуровневый компилятор.\r\n\r\nТокенизатор\r\nРазработка на Python началась с использования встроенное библиотеки токенизатора, то есть этот этап был довольно простым.\r\n\r\nНеобходимо было внести только небольшие изменения в выводимые по умолчанию данных, в том числе вырезание комментариев (но не #include).\r\n\r\nДерево грамматики\r\nДерево грамматики создавалось с расчётом на удобную расширяемость без необходимости изменения исходного кода.\r\n\r\nСтруктура дерева хранится в файле XML, который содержит структуру составляющих дерево узлов и их соединений с другими узлами и токенами.\r\n\r\nГрамматика должна была поддерживать повторяющиеся узлы, а также необязательные узлы. Мы решили эту задачу добавлением метатегов, описывающих способ считывания токенов.\r\n\r\nГенерируемые токены затем парсятся по правилам грамматики таким образом, что выходные данные формируют дерево элементов грамматики, например, sub и generic_variables, которые в свою очередь содержат другие элементы грамматики и токены.\r\n\r\nКомпиляция в высокоуровневый код\r\nКаждая функция языка должна компилироваться в высокоуровневые конструкции. Например, assign(a, 12) и call_subroutine(is_prime, call_variable=12, return_variable=temp_var). В этом сегменте выполняются такие функции, как встраивание элементов. Они определяются как operator, их особенность в том, что они встраиваются каждый раз, когда используется такой оператор, как + или %. Поэтому они более ограничены, чем обычный код — они не могут использовать собственный оператор и любой другой оператор, зависящий от определённого.\r\n\r\nВ процессе встраивания внутренние переменные заменяются на те, которые были вызваны. Таким образом это:\r\n\r\noperator(int a + int b) -> int c\r\n return __ADD__(a, b)\r\nint i = 3+3\r\n\r\nпревращается в\r\n\r\nint i = __ADD__(3, 3)\r\n\r\nОднако такое поведение может быть вредоносным и подверженным ошибкам, если входная и выходная переменные указывают на одно место в памяти. Для использования более «безопасного» поведения ключевое слово unsafe регулирует процесс компиляции таким образом, чтобы эти дополнительные переменные при необходимости создавались и копировались из подстановки.\r\n\r\nВременные переменные (scratch variable) и сложные операции\r\nМатематические операции вида a += (b + c) * 4 невозможно вычислить без использования дополнительных ячеек памяти. Высокоуровневый компилятор справляется с этой проблемой, разделяя операции на различные части:\r\n\r\nscratch_1 = b + c\r\nscratch_1 = scratch_1 * 4\r\na = a + scratch_1\r\n\r\nТаким образом вводится концепция временных переменных, используемых для хранения промежуточной информации вычислений. Они выделяются при необходимости и освобождаются после завершения работы в общий пул. Это позволяет снизить количество требуемых для работы временных участков памяти. Временные переменные считаются глобальными.\r\n\r\nКаждая подпрограмма имеет собственный VariableStore для хранения ссылок на все используемые подпрограммой переменные и их типов. В конце компиляции они транслируются в относительные смещения от начала хранилища, а затем им даются действительные адреса в ОЗУ.\r\n\r\nСтруктура ОЗУ\r\n\r\nСчётчик команд\r\nЛокальные переменные подпрограммы\r\nЛокальные переменные операторов (используются повторно)\r\nВременные переменные\r\nПеременная результата\r\nУказатель стека\r\nСтек\r\n...\r\n\r\nНизкоуровневая компиляция\r\nЕдинственное, с чем приходится работать низкоуровневому компилятору — это sub, call_sub, return, assign, if и while. Это сильно уменьшенный список задач, который более удобно транслировать в инструкции QFTASM.\r\n\r\nsub\r\nОна задаёт начало и конец именованной подпрограммы. Низкоуровневый компилятор добавляет метки, а в случае подпрограммы main добавляет инструкцию выхода (переход к концу ПЗУ).\r\n\r\nif и while\r\nНизкоуровневые интерпретаторы while и if довольно просты: они получают указатели на их условия и зависящий от них переход. Циклы while немного отличаются в том, что они компилируются как\r\n\r\n...\r\nусловие\r\nпереход к проверке\r\nкод\r\nусловие\r\nесли условие: переход к коду\r\n...\r\n\r\ncall_sub и return\r\nВ отличие от большинства архитектур, компьютер, для которого мы выполняем компилирование, не имеет аппаратной поддержки добавления и извлечения из стека. Это значит, что добавление и извлечение из стека занимают по две инструкции. В случае извлечения мы выполняем декремент указателя стека и копируем значение по адресу. В случае добавления мы копируем значение из адреса в адрес текущего указателя стека, а затем выполняем инкремент.\r\n\r\nВсе локальные переменные подпрограммы хранятся в постоянном месте ОЗУ, задаваемом во время компиляции. Для реализации рекурсии все локальные переменные для функции в начале вызова помещаются в стек. Затем аргументы подпрограммы копируются в их позицию в хранилище локальных переменных. Значение адреса возврата добавляется в стек и подпрограмма выполняется.\r\n\r\nКогда встречается конструкция return, вершина стека извлекается и счётчик команд устанавливается на это значение. Значения для локальных переменных вызывающей подпрограммы извлекаются из вершины стека и возвращаются в их предыдущую позицию.\r\n\r\nassign\r\nПрисвоение переменных компилировать легче всего: нужно взять переменную и значение и скомпилировать их в одну строку: MLZ -1 VALUE VARIABLE\r\n\r\nНазначение адресов перехода\r\nНаконец, компилятор создаёт адреса перехода для добавленных к инструкциям меток. Определяется абсолютная позиция меток, после чего ссылки на эти метки заменяются этими значениями. Сами метки удаляются из кода, после чего, наконец, к скомпилированному коду добавляются номера инструкций.\r\n\r\nПоэтапный пример компиляции\r\nМы прошли по всем этапам, теперь давайте пошагово пройдём по процессу компиляции настоящей программы.\r\n\r\n#include stdint\r\n\r\nsub main\r\n int a = 8\r\n int b = 12\r\n int c = a * b\r\n\r\nОтлично, всё довольно просто. Очевидно, что в конце программы a = 8, b = 12, c = 96. Для начала давайте вставим соответствующие части из stdint.txt:\r\n\r\noperator (int a + int b) -> int\r\n return __ADD__(a, b)\r\n\r\noperator (int a - int b) -> int\r\n return __SUB__(a, b)\r\n\r\noperator (int a < int b) -> bool\r\n bool rtn = 0\r\n rtn = __MLZ__(a-b, 1)\r\n return rtn\r\n\r\nunsafe operator (int a * int b) -> int\r\n int rtn = 0\r\n for (int i = 0; i < b; i+=1)\r\n rtn += a\r\n return rtn\r\n\r\nsub main\r\n int a = 8\r\n int b = 12\r\n int c = a * b\r\n\r\nТак, всё стало немного сложнее. Давайте перейдём к токенизатору и посмотрим, что получится. На этом этапе у нас есть только линейный поток токенов без какой-либо структуры\r\n\r\nNAME NAME operator\r\nLPAR OP (\r\nNAME NAME int\r\nNAME NAME a\r\nPLUS OP +\r\nNAME NAME int\r\nNAME NAME b\r\nRPAR OP )\r\nOP OP ->\r\nNAME NAME int\r\nNEWLINE NEWLINE\r\nINDENT INDENT \r\nNAME NAME return\r\nNAME NAME __ADD__\r\nLPAR OP (\r\nNAME NAME a\r\nCOMMA OP ,\r\nNAME NAME b\r\nRPAR OP )\r\n...\r\n\r\nТеперь все токены будут пропущены через грамматический парсер, который выведет дерево с названием каждой из частей. Оно демонстрирует высокоуровневую структуру считанного кода.\r\n\r\nGrammarTree file\r\n 'stmts': [GrammarTree stmts_0\r\n '_block_name': 'inline'\r\n 'inline': GrammarTree inline\r\n '_block_name': 'two_op'\r\n 'type_var': GrammarTree type_var\r\n '_block_name': 'type'\r\n 'type': 'int'\r\n 'name': 'a'\r\n '_global': False\r\n\r\n'operator': GrammarTree operator\r\n '_block_name': '+'\r\n\r\n'type_var_2': GrammarTree type_var\r\n '_block_name': 'type'\r\n 'type': 'int'\r\n 'name': 'b'\r\n '_global': False\r\n 'rtn_type': 'int'\r\n 'stmts': GrammarTree stmts\r\n ...\r\n\r\nЭто дерево грамматики задаёт информацию для парсинга высокоуровневым компилятором. В неё входит информация о типах структур и атрибутах переменных. Затем дерево грамматики берёт эту информацию и назначает переменные, необходимые для подпрограмм. Дерево также вставляет все подстановки.\r\n\r\n('sub', 'start', 'main')\r\n('assign', int main_a, 8)\r\n('assign', int main_b, 12)\r\n('assign', int op(*:rtn), 0)\r\n('assign', int op(*:i), 0)\r\n('assign', global bool scratch_2, 0)\r\n('call_sub', '__SUB__', [int op(*:i), int main_b], global int scratch_3)\r\n('call_sub', '__MLZ__', [global int scratch_3, 1], global bool scratch_2)\r\n('while', 'start', 1, 'for')\r\n('call_sub', '__ADD__', [int op(*:rtn), int main_a], int op(*:rtn))\r\n('call_sub', '__ADD__', [int op(*:i), 1], int op(*:i))\r\n('assign', global bool scratch_2, 0)\r\n('call_sub', '__SUB__', [int op(*:i), int main_b], global int scratch_3)\r\n('call_sub', '__MLZ__', [global int scratch_3, 1], global bool scratch_2)\r\n('while', 'end', 1, global bool scratch_2)\r\n('assign', int main_c, int op(*:rtn))\r\n('sub', 'end', 'main')\r\n\r\nЗатем низкоуровневый компилятор должен преобразовать этот высокоуровневый вид в код QFTASM. Переменным назначается место в ОЗУ следующим образом:\r\n\r\nint program_counter\r\nint op(*:i)\r\nint main_a\r\nint op(*:rtn)\r\nint main_c\r\nint main_b\r\nglobal int scratch_1\r\nglobal bool scratch_2\r\nglobal int scratch_3\r\nglobal int scratch_4\r\nglobal int <result>\r\nglobal int <stack>\r\n\r\nЗатем простые инструкции компилируются. Наконец, добавляются номера инструкций, и в результате получается исполняемый код QFTASM.\r\n\r\n0. MLZ 0 0 0;\r\n1. MLZ -1 12 11;\r\n2. MLZ -1 8 2;\r\n3. MLZ -1 12 5;\r\n4. MLZ -1 0 3;\r\n5. MLZ -1 0 1;\r\n6. MLZ -1 0 7;\r\n7. SUB A1 A5 8;\r\n8. MLZ A8 1 7;\r\n9. MLZ -1 15 0;\r\n10. MLZ 0 0 0;\r\n11. ADD A3 A2 3;\r\n12. ADD A1 1 1;\r\n13. MLZ -1 0 7;\r\n14. SUB A1 A5 8;\r\n15. MLZ A8 1 7;\r\n16. MNZ A7 10 0;\r\n17. MLZ 0 0 0;\r\n18. MLZ -1 A3 4;\r\n19. MLZ -1 -2 0;\r\n20. MLZ 0 0 0;\r\n\r\nСинтаксис\r\nИтак, у нас есть простой язык, и нам нужно написать на нём небольшую программу. Мы используем отступы как в Python, разделяя логические блоки и поток команд. Это значит, что в наших программах важны пробелы. Каждая готовая программа имеет подпрограмму main, которая действует как функция main() C-подобных языках. Функция выполняется в начале программы.\r\n\r\nПеременные и типы\r\nКогда переменная задаётся впервые, ей нужен связанный с ней тип. Пока у нас есть заданные типы int и bool с заданным для массивов, но не для компилятора синтаксисом.\r\n\r\nБиблиотеки и операторы\r\nИмеется библиотека stdint.txt, задающая основные операторы. Если она не встроена в программу, то даже простейшие операторы не будут определены. Можно использовать эту библиотеку с помощью #include stdint. stdint определяет такие операторы, как +, >> и даже * с %, ни один из которых не имеет непосредственного опкода QFTASM.\r\n\r\nКроме того, язык позволяет выполнять прямой вызов опкодов QFTASM с помощью __OPCODENAME__.\r\n\r\nВ stdint сложение определяется следующим образом\r\n\r\noperator (int a + int b) -> int\r\n return __ADD__(a, b)\r\n\r\nЭта запись определяет, что оператор + должен делать, когда ему передают два числа int."
    },
    {
        "title": "Bad Rabbit показал: программы-вымогатели шифруют данные резервных копий",
        "text": "Во вторник, 24 октября 2017 г., программа-вымогатель Bad Rabbit нанесла удар по России, Украине, Турции, Германии, Болгарии, США и Японии. Сильнее всего при этом пострадали Россия и Украина, поскольку ее распространение началось на взломанных хакерами российских новостных сайтах. Первыми жертвами стали российские агентства «Интерфакс» и «Фонтанка», а также украинские транспортные организации, включая одесский аэропорт, киевский метрополитен и Министерство инфраструктуры и ряд других организаций.\r\n\r\n\r\nНаши исследования показали, что в основе Bad Rabbit лежит переработанный код NonPetya и exPetr, о чем также говорят модель его поведения и конечная цель атак. В то же время мы заметили, что в него входят элементы других программ-вымогателей, например, подходы, использовавшиеся при разработке шифровальщика HDDCryptor. Однако при этом люди, стоящие за Bad Rabbit, исправили кое-какие ошибки и свели все вышеперечисленные элементы воедино, получив очень интересный результат. Кроме того, для своего кода они использовали поддельный сертификат безопасности Symantec. Еще одна характерная черта Bad Rabbit – это способность собирать пароли пользователей на зараженных компьютерах и загружать дополнительные вредоносные модули.\r\nРассматриваемый шифровальщик не использует принципиально новых хитростей при атаке и заражении, а скорее наоборот – опирается на очень старый прием, предполагающий установку пользователями поддельного обновления Adobe Flash. Что удивительно, такой подход до сих пор срабатывает, наглядно показывая, низкую осведомленность компаний и потребителей в вопросах кибербезопасности и таящейся за программами-вымогателями опасности. До тех пор, пока пользователи не начнут воспринимать данную угрозу всерьез и принимать необходимые меры безопасности, риски лишиться доступа к своим данным остаются очень высокими.\r\nОсновные факты о Bad Rabbit\r\n\r\nИспользует элементы кода NonPetya/ExPetr\r\nРаспространяется под видом обновления для Adobe Flash, требующего установки вручную\r\nДля шифрования использует легитимный драйвер\r\nДелает попытки распространиться по локальной сети довольно примитивным способом, но также может использовать уязвимость SMB EternalRomance.\r\nЗаменяет главную загрузочную запись жёсткого диска и делает компьютер непригодным к использованию\r\nЛегитимный драйвер не всегда стабилен на Windows 10, возможен крах системы\r\nВ основном затронул корпоративных пользователей Windows\r\n\r\nСхема заражения и технические характеристики\r\nДля запуска атаки киберпреступники взломали несколько сайтов популярных СМИ и выложили на них скрипт со ссылкой на фальшивую программу установки Adobe Flash, который просил пользователей запустить обновление, когда они заходили на сайт. Многие пользователи попались на эту уловку, даже несмотря на то, что специалисты по безопасности уже долгие годы предостерегают людей от установки обновлений программ с сомнительных источников и рекомендуют проверять все обновления антивирусом, чтобы убедиться в отсутствии взлома или заражения вредоносным кодом. Аналогичные фальшивые обновления программного обеспечения Adobe были очень популярны много лет назад и, к сожалению, остаются эффективными и в наши дни.\r\nДроппер распространяется с адреса hxxp://1dnscontrol[.]com/flash_install.php. После этого пользователь загружает файл install_flash_player.exe, который требует административных привилегий в системе. Что забавно – он пытается получить их при помощи стандартного запроса системы контроля учетных записей пользователей (UAC). В случае запуска дроппер извлекает криптографический модуль файлового уровня infpub.dat (на самом деле – dll-библиотеку), криптографический модуль дискового уровня dispci.exe и драйвер режима ядра cscc.dat (на самом деле – легальный драйвер dcrypt.sys).\r\nПосле того, как пользователь \"самостоятельно\" заражает свой компьютер, Bad Rabbit пытается распространиться по локальной сети при помощи инструмента mimikatz, который дает ему возможность извлекать учетные данные из системы проверки подлинности локальной системы безопасности в открытом виде, а также встроенный список учетных данных, содержащий примеры наименее удачных паролей. Атаки плохих парней остаются очень эффективными, ведь «12345» и «password» уже многие годы остаются в топе самых популярных паролей.\r\nКак мы уже отметили, Bad Rabbit использует два типа шифрования – файлового и дискового уровня. Он не имитирует chkdsk.exe, как это делал NonPetya, чтобы замаскировать шифрование, и не использует уязвимость EternalBlue в файловом сервере Microsoft srv.sys, но может использовать уязвимость EternalRomance в файловом сервере Microsoft srv.sys. Сначала Bad Rabbit запускает шифрование файлового уровня (infpub.dat через rundll32), если находит достаточно файлов для этого. Затем в Планировщике он создает задания для запуска dispci.exe с целью шифрования дисков, после чего перезапускает систему. После первого перезапуска dispci.exe прописывает расширенную программу загрузки в конце диска, которая позднее берет на себя все функции управления при помощи зараженного MBR диска. Наконец, весь диск оказывается зашифрованным, главная загрузочная запись – замененной, а компьютер вновь перезапускается, и на его экране отображается сообщение с требованием выкупа в размере 0,05 биткоина (примерно 275 долларов США).\r\nЧто любопытно – на компьютерах с Windows 10 модуль, использовавшийся для шифрования, нередко вызывает появление «синего экрана смерти» из-за проблем с совместимостью. Еще один момент – при шифровании файлов их расширение не меняется, что может нарушить работу эвристических механизмов, используемых некоторыми антивирусами, реагирующими на изменение расширения. Bad Rabbit может работать и в режиме оффлайн, и потенциально это означает, что он может заражать другие компьютеры через флеш-накопители.\r\nОсновной целью Bad Rabbit являются компании и коммерческие предприятия, и на данный момент мы уже наблюдаем снижение уровня заражения. Вредоносный сервер уже не действует, а большинство зараженных сайтов, на которых был размещен скрипт для вредоносного обновления Flash, в настоящий момент отключено или вылечено. Впрочем, это не означает, что можно расслабиться. Новая атака может произойти в любой момент.\r\n\r\n\r\nМы уже давно следим за проблемой программ-вымогателей и заметили, что пользователи чаще всего в качестве основного инструмента защиты своих данных полагаются на резервное копирование. Как несложно догадаться, на это обратили внимание не только мы, но и киберпреступники, поэтому практически все новые программы-вымогатели пытаются удалить или зашифровать в том числе и файлы резервных копий. Например, Bad Rabbit, как видно на скриншоте выше, атакует файлы Acronis Backup (*.tib).\r\nК несчастью для разработчиков Bad Rabbit, начиная с версии Acronis True Image 2017 New Generation, мы обеспечиваем надежную многоуровневую защиту данных с помощью технологии Active Protection, и последняя атака прекрасно иллюстрирует эффективность нашей проактивной технологии. Чтобы отразить атаку программы-вымогателя и защитить пользовательские данные, Active Protection не нужно постоянно обновляться, подключаться к интернету или использовать сложные предустановленные правила. Все это позволяет Acronis обеспечивать самое безопасное резервное копирование в мире, предоставляя единственное решение, которое сочетает активный и пассивный подходы к защите данных.\r\nКак Acronis Active Protection борется с Bad Rabbit и любыми попытками кибер-вымогательства\r\nДавайте пошагово рассмотрим, как Active Protection защищает данные от Bad Rabbit.\r\n\r\n\r\nПрежде всего, Active Protection от Acronis обнаруживает вредоносные DLL-модули, запускаемые через rundll32, рекомендует пользователю заблокировать вредоносный процесс и автоматически отменяет все несанкционированные изменения.\r\nActive Protection также обнаруживает и блокирует попытки зловреда изменить главную загрузочную запись (MBR) вашего жесткого диска. \r\n\r\n\r\nНаконец, надежные технологии самозащиты, входящие в Active Protection от Acronis, с легкостью предотвращают попытки Bad Rabbit или любой другой программы-вымогателя зашифровать резервные копии. \r\n\r\n\r\nРанее в этом году функция самозащиты была независимо протестирована в лаборатории Anti-malware-test.com и признана очень эффективной, в том время как большинство прочих решений для резервного копирования практически не способны к самозащите.\r\n\r\n\r\n\r\nНадежное резервное копирование, способное остановить программу-вымогатель — это безусловная необходимость\r\nПодумайте о том, что, если антивирусная программа не справится и зловред зашифрует резервные копии, ваши данные будут потеряны навсегда.\r\nПоэтому важно выбрать такое решение для резервного копирования, которое:\r\n\r\nВключает проактивные технологии против программ-вымогателей такие, как Acronis Active Protection.\r\nОбеспечивает многослойную защиту, которая работает на всех стадиях потенциальной атаки: предупреждает, противодействует и восстанавливает.\r\nПредлагает надежные функции самозащиты, которые не дают программе-вымогателю подвергнуть опасности ни локальные, ни облачные резервные копии.\r\nРаботает быстро, так как медленное восстановление означает потерю времени и денег. Технологии Acronis прошли независимое тестирование, подтвердившее их преимущество в скорости перед конкурентами.\r\n\r\nНадежные решения для резервного копирования от Acronis:\r\n\r\nДля бизнеса — Acronis Backup 12.5\r\nДля домашних пользователей — Acronis True Image 2018\r\nДля поставщиков услуг — Acronis Backup Cloud"
    },
    {
        "title": "Незаурядное Зарядье: как мы парк автоматизировали",
        "text": "Вы уже были в новом парке «Зарядье»? Впрочем, даже если вы не из Москвы, то наверняка о нем слышали. Ведь это — флагманский парк национального масштаба и самая настоящая достопримечательность современной Москвы. Здесь объекты наследия XVI века соседствуют с инновационной архитектурой и высокотехнологичными медиакомплексами. О них мы сегодня и расскажем. Ведь знаем все не понаслышке — сами поставляли оборудование и настраивали. \r\n\r\n\r\nПожалуй, лучшая стройплощадка в России — с видом на Кремль и Собор Василия Блаженного. Глаз не оторвать!\r\n\r\nЕсли вдруг кто не слышал\r\nСтроительство парка «Зарядье» началось в 2015 году. В Москве это первый за более чем 50 лет масштабный проект создания у стен Кремля уникального пространства на стыке разнообразного природного ландшафта, высоких технологий и архитектуры. «Зарядье» — первый парк, построенный в границах Бульварного кольца, — уже стал центром притяжения для жителей и гостей столицы.\r\n \r\nИстория ЗарядьяНазвание парка происходит от названия одного из древнейших районов Москвы, Зарядья, история которого насчитывает более 8 веков. В разные времена Зарядье было центром торговли, посольским кварталом и даже трущобами.\r\n\r\nВ ХХ веке здесь предполагалось разместить одну из московских высоток, но проект не был завершен. На заложенном фундаменте в 1967 году возвели гостиницу «Россия», на тот момент — самую большую в мире.\r\n\r\nВ начале XXI века правительство Москвы приняло решение разобрать огромное, сильно обветшавшее и морально устаревшее здание. В 2006 года гостиница была закрыта и демонтирована. На ее месте планировалось построить новый гостинично-офисный комплекс с парковкой. Но в начале 2012 года президент России Владимир Путин объявил, что в историческом районе Зарядье будет разбит современный парк. \r\n\r\nВ первом этапе международного конкурса на создание ландшафтно-архитектурной концепции парка были рассмотрены заявки из 27 стран, от 420 компаний, объединенных в 90 консорциумов. В жюри конкурса вошли ведущие специалисты по архитектуре и урбанистике, среди них — Саския Сассен, профессор Колумбийского университета, Антони Вивес-и-Томас, вице-мэр Барселоны, и Марта Торн, исполнительный директор Притцкеровской премии. Победу одержал международный консорциум, включающий архитекторов бюро Diller Scofidio + Renfro (Нью-Йорк), специалистов ландшафтной мастерской Hargreaves Associates (Нью-Йорк) и урбанистов из Citymakers (Москва).\r\nСтроительство парка «Зарядье» началось в 2015 году. В 2017 году строительство парка завершилось. \r\n \r\nПодробнее об истории Зарядья можно почитать здесь.\r\n\r\nНо «Зарядье» — это не только ландшафты, это еще и очень сложная инженерная и ИТ-инфраструктура, которая помогает организовать современные просветительские программы и интерактивный отдых. \r\n\r\n\r\nПринципиально не показываем сразу готовый вариант — идите и смотрите сами. Только технохардкор!\r\n\r\n\r\nТак создается лучшая смотровая площадка Москвы — парящий мост парка «Зарядье»: V-образная консоль, расположенная на высоте 13 м над уровнем реки. С нее открываются панорамные виды на Кремль, набережную и сам парк.\r\n\r\nСделать надо внезапно\r\nЕсли вы хоть раз работали с российскими проектами, да еще и такой важности, то наверняка знаете, что такое сроки и как к ним относятся. Пятилетка в три года отдыхает по сравнению с тем, за сколько мы сделали свою часть автоматизации «Зарядья». Так, например, весь проект от того, как мы о нем услышали, до запуска занял два года, из них полтора — работа непосредственно в полях. Медиакомплекс «Полет» мы — специалисты компании «ЛАНИТ-Интеграция» — собрали и запустили за 9 месяцев, в то время как в международной практике такие работы занимают 2 года и более. \r\n\r\n\r\nМонтаж оборудования для медиакомплекса «Машина времени».\r\n\r\n\r\nСкоро здесь вместо лесов будут люди. Самые настоящие.\r\n\r\n\r\nИ только виды продолжали нас радовать. \r\n\r\n«Полет» во сне и наяву\r\nМедиакомплекс представляет собой кинотеатр с акустически прозрачным проекционным экраном в форме сегмента сферы 11 метров высотой и специализированной платформой со зрительскими креслами, имеющими 6 степеней свободы (можно сесть так, как комфортно). \r\n\r\nИзюминкой аттракциона является то, что до начала шоу-программы платформа находится в горизонтальном положении и зрители просто входят в помещение и рассаживаются по местам. Когда шоу начинается, платформа поднимается и поворачивается на 90 градусов. После этого все оказываются наедине с потрясающими видами Москвы, а система многоканального озвучивания и спецэффектов, работающих синхронно с видеорядом и поворотами платформы, дает настоящее ощущение полета.\r\n\r\nВот так выглядел медиакомплекс до того, как наша команда взялась за инсталляцию.\r\n\r\nОтправляясь в «Полет», можно пронестись сквозь фонтаны ВДНХ, ощутив запах свежего, наполненного водяными брызгами воздуха, над Кремлем и усадьбой Кусково, побыть в эпицентре фейерверков, посмотреть на фестиваль воздушных шаров с высоты птичьего полета и многое другое. За техническую сторону отвечают 3 проектора с разрешением 4К – каждый, 4 специализированных видеосервера, более 80 тонн механики и гидравлики. И свыше 16 кВт звука в помощь.\r\n\r\n\r\nНам помогал Человек-Паук, без него с проводами пришлось бы очевидно туго.\r\n\r\nВам кажется такая система хрупкой? Ничего подобного! Безопасность стала главным приоритетом. Все аттракционы в России проходят обязательную сертификацию, получают соответствующие документы, талоны и т.д. «Полет» испытывался по верхней планке. После завершения монтажа и настройки первыми на сиденьях полетели над виртуальной Москвой… мешки с песком. Причем стандартно это мешки весом 80 кг — как плотный человек, но мы решили, что нагрузка должна быть сверх нормы и положили по 136 кг — максимальная планка.\r\n\r\n\r\nВот и наши первые испытатели — мешки с песком\r\n\r\n\r\nМонтажники-высотники с высоты вам шлют привет! Обратите внимание на наши нескучные леса.\r\n\r\nА после мешков с песком полетели мы сами, руководство ЛАНИТ и даже кое-кто из руководства Москвы. Ну что сказать — восторг полный. Кстати, первое время мы еще присутствовали на площадке и видели, как выходили группы посетителей — абсолютно все после «проката» аплодируют.\r\n\r\n\r\n\r\nПрочнее прочного\r\n\r\nВосторг вызывают особые спецэффекты: брызги, ветер, запахи. На самом деле, тут все достаточно тривиально разбрызгивается. А вот видео сделано потрясающе — полное ощущение полета (видео — дело рук компании «Красный Квадрат», за что им огромное спасибо). Если у вас боязнь высоты, то дважды подумайте перед тем, как взлететь над Москвой в медиакомплексе, — все очень реалистично.\r\n\r\n\r\nПостиндустриальный портрет в интерьерах.\r\n\r\n\r\nА это платформа, с помощью которой мы и «полетим» над Москвой. Ну что, готовы?!\r\n\r\n\r\nВсе пристегнули ремни? И даже настроением хорошим запаслись? Тогда поехали!\r\n\r\n\r\n\r\n«Машина времени»: мы в такие шагали дали...\r\nВторой медиакомплекс, инсталляцией которого мы занимались, — «Машина времени». Этот крутой многофункциональный презентационный павильон расположен в здании медиацентра «Зарядья» по соседству с «Полетом».\r\n\r\n\r\nТот самый медиацентр — взгляд изнутри: с левой стороны от стойки приема посетителей и продажи билетов расположился центр «полетов» над столицей, с правой — путешествий во времени.\r\n\r\nПопадая в «Машину времени», оказываешься в самом центре истории становления и развития нашей страны. Ощущение полного погружения возникает благодаря тому, что изображение выводится на поверхность пола и цилиндрический экран диаметром 16,5 и высотой 5 метров. Многоканальная система звукоусиления, генераторы спецэффектов (дым, запах, ветер) и возможность интерактивного взаимодействия с видеорядом создают необходимую атмосферу. В перспективе помещение медиакомплекса можно использовать для самых разных мероприятий, например, для проведения образовательных программ, выставок и презентаций.\r\n\r\n\r\nМешки и здесь пригодились.\r\n\r\nВ качестве системы отображения медиакомплекса используется проекционная система, а при помощи специализированных медиа-серверов и ПО управления шоу-программой, реализуется сшивка проекционных систем, управление многоканальной системой звукоусиления, интерактивным взаимодействием и работой спецэффектов. «Машина времени» оснащена специализированной системой для слабослышащих.\r\n\r\n\r\nЭто не задымление на площадке, а те самые спецэффекты.\r\n\r\n\r\nНервная система медиакомплекса — взгляд изнутри.\r\n\r\nЗа все это отвечают 33 проектора, 10 специализированных медиасерверов, 26 специализированных трекинговых видеокамер и более 20 кВт звука.\r\n\r\n\r\nПока в Древней Руси обедали, наши люди монтировали и проверяли оборудование.\r\n\r\nЭто не просто медиакомплекс, а история об огромных мультимедийных возможностях, уникальная площадка для воплощения самых смелых идей телевизионщиков.\r\n\r\n\r\nВсем, кто хочет отправиться в путешествие на «Машине времени», без «инструктажа» не обойтись: перед посещением обязательно посмотрите ролик о том, как создавался видеоряд. Фильм об истории Москвы снимал Первый канал. Уже посмотрели? Тогда — в путь!\r\n\r\n\r\nПеремещаясь на «Машине времени», можно не только посмотреть на столицу из космоса...\r\n\r\n\r\nНо и пройтись по Абрикосовой, свернуть на Виноградную… и оказаться в самом сердце Москвы XIX века.\r\n\r\nКстати, об обучении\r\nПарк «Зарядье» изначально не задумывался исключительно как релаксационный. Прежде всего, это место для просвещения, развития и удовлетворения любопытства людей всех возрастов. Наша компания выступила подрядчиком для оборудования многочисленных лабораторий, видеостен, интерактивных киосков по всей территории парка.\r\n\r\n\r\nНа видеокарте представлена вся территория парка: осталось только выбрать места для посещения, отдохнуть перед прогулкой и в путь.\r\n\r\n\r\nКупить билеты в медиакомплексы или на образовательные программы можно в интерактивном киоске.  \r\n\r\n«Умная» часть проекта была реализована, например, в павильоне «Заповедное посольство», где в зоне флорариума можно насладиться видами отдаленных уголков России через специальное смотровое окно. Светодиодный экран с шагом пикселей 1,2 мм, габаритами 5,5х3,1 метра, со специализированным оптическим покрытием и система звукоусиления действительно дают тот самый эффект «окна» в другие уголки России.\r\n\r\n\r\nА из нашего «окна» степь российская видна. Даже уезжать никуда не надо.\r\n\r\nВ дополнение к этому эффекту экраны можно использовать во время проведения семинаров и конференций: достаточно подключить источник медиаконтента (например, ноутбук) к соответствующему архитектурному интерфейсу.\r\n\r\nВ самом «Заповедном посольстве» находятся 4 учебные аудитории, самая настоящая, мощно оборудованная биологическая лаборатория и конференц-зал, в которых регулярно проводятся учебные мероприятия. Помещения оснащены всем необходимым для демонстрации учебных материалов, включая специализированное оборудование в биологической лаборатории, проекционные системы, интерактивные доски, системы видеоконференцсвязи и беспроводной трансляции контента.\r\n\r\n\r\nУчиться или слушать докладчиков во время конференций — одно удовольствие...\r\n\r\n\r\nА обеспечивать синхронный перевод — другое.\r\n\r\nВо всех павильонах работает система Digital Signage, предоставляющая посетителям информационную и навигационную поддержку, одновременно являясь и частью дизайна этих павильонов. Технические детали: более 50 информационных экранов, включая интерактивные киоски и видеостены, более 60 акустических систем.\r\n\r\nКстати, о любопытстве — наверняка у вас возникли вопросы о ставшей знаменитой «Стеклянной коре» над Большим амфитеатром парка. Мы к ней отношения не имеем, но как инженеры, не могли не разузнать, что это за загадочная крыша небольшого мира. Это металлический каркас из стеклянных треугольников, под которым располагается часть мест для зрителей Большого амфитеатра и смотровая площадка. Чудо-крыша обеспечит температуру на несколько градусов выше, чем на улице. Для зимы — самое то, а чтобы летом было не жарко, предусмотрена система проветривания. \r\n\r\n\r\nВот так создавалась «Стеклянная кора».\r\n\r\nБыло горячо\r\nЧто и говорить, проект оказался для нас очень непростым. Судите сами.\r\n\r\n\r\n​Медиацентр «Зарядья» объединяет два описанных нами  медиакомплекса и всю ИТ-инфраструктуру парка.\r\n\r\nМедиакомплекс «Полет», весом более 80 тонн, расположен над подземным паркингом и не имеет внешних стен. Проект по его монтажу был уникальным.\r\n\r\nОбщее количество пикселей медиаконтента для «Машины времени» составляет 62 681 104.\r\n\r\nБолее 360 000 000 — общее количество пикселей всех уникальных видеоповерхностей.\r\n\r\nБолее 55 кВт – общая мощность акустических систем в медиацентре, инсталляции-лабиринте «Ледяная пещера» и научно-познавательном центре «Заповедное посольство».\r\n\r\nБолее 18 000 чел/час – трудозатраты на разработку проектной документации.\r\n\r\n\r\n\r\nКартинка очень точно передает наше состояние, когда мы узнали о сроках\r\n\r\nХотите узнать, что мы сделали еще в «Зарядье»?Полный список всего, к чему приложили руки и головы, а точнее — оснастили оборудованием сотрудники «ЛАНИТ-Интеграция»:\r\n\r\n​ медиацентр парка;\r\n\r\n​ медиакомплекс «Полет» и пре-шоу;\r\n\r\nмедиакомплекс «Машина времени» и пре-шоу;\r\n\r\n​система Digital Signage в медиацентре, «Ледяной пещере» и «Заповедном посольстве»;\r\n\r\n​ входная зона «Москва сейчас»;\r\n\r\n​ медиастудия «Главкино. Дети в «Зарядье»;\r\n\r\n​ зал для совещаний и дискуссий;\r\n\r\n​ четыре учебные аудитории;\r\n\r\n​ лаборатория;\r\n\r\n​ четыре рабочих кабинета;\r\n\r\n​ переговорная;\r\n\r\n​ офисные помещения и кабинет директора.\r\n\r\n\r\n \r\nБыли и курьезы. Например, нас обвинили в том, что мы берем «испытателей» по блату. Поскольку оснащение медиакомплексов — дело серьезное, связанное со здоровьем и безопасностью людей, мы проводили не только технический инструктаж, но и обучали персонал парка работе с внештатными ситуациями: как рассадить зрителей, как помочь им выйти из помещения, как контролировать — все эти процессы не допускают вольностей со стороны работников парка и самих посетителей. Так вот, кто-то решил, что для тренировки мы берем своих да наших. А на самом деле, мы приглашали волонтеров в обмен на сеанс в каждом медиакомплексе.\r\n\r\nДва года мы работали круглосуточно и без выходных, не особо даже замечая смену времен года. И парк « Зарядье» преподнес нам главный урок: верить в себя и не бояться ни сроков, ни срывов со стороны поставщиков. Теперь мы знаем, что с честью можем делать такие проекты.\r\n\r\nДля тех, кто хочет стать частью нашей команды, в «Ланит-Интеграции» как раз есть несколько вакансий\r\nИнженер-проектировщик по аудио-визуальным комплексам и ВКС\r\nСистемный архитектор  \r\nРуководитель проектов\r\n\r\n\r\n\r\nПосле такой технокрасоты меркнет любой салют.\r\n\r\n\r\n\r\nА вы уже были в парке «Зарядье»?"
    },
    {
        "title": "Искусственный интеллект Nemesida WAF",
        "text": "Есть мнение, что искусственный интеллект — это не больше, чем маркетинговый ход. В статье мы покажем, как искусственный интеллект Nemesida WAF позволяет выявлять и блокировать атаки на веб-приложения с поразительной точностью в 99,96%.\r\n\r\nТеория: принцип работы Nemesida AI\r\nМашинное обучение (распознавание образов) или искусственный интеллект (как сейчас модно говорить), применяется в тех областях, где анализ данных, проводимый человеком, становится невозможным из-за больших объемов информации или неполноты выделяемой информации. В общем, когда у нас в арсенале накопилось больше миллиона запросов к различным веб-приложениям, решение о необходимости применения машинного обучения назрело само собой.\r\n\r\nНа основе анализа научных исследований и существующих прототипов была построена схема работы Nemeisda AI, а после анализа данных сформировано признаковое пространство из элементов. Поскольку большинство признаков являются текстовыми, производилась их векторизация для дальнейшего использования в алгоритме распознавания. Поскольку поля запросов не являются отдельными словами, а зачастую состоят из последовательностей символов, было принято решение об использовании подхода на основе анализа частоты встречаемости n-грамм (TF-IDF).\r\n\r\nАнализ имеющихся данных позволил сформировать пространство признаков, на основе которого и был построен классификатор. Задача обнаружения атак с математической точки зрения формализовалась как классическая задача классификации (два класса: легитимный и нелегитимный трафик). Выбор алгоритмов производился по критерию доступности реализации и возможности тестирования. Наилучшим образом себя показал алгоритм градиентного бустинга (AdaBoost), который позволил на 100 млн. запросов обеспечить 99.96% точности при уровне ложных срабатываний менее 0,04%. Таким образом, после обучения принятие решения Nemesida WAF осуществляется c учетом статистических свойств анализируемых данных, а не на основе детерминированных признаков (сигнатур) атак. \r\n\r\nНедостаток сигнатурного метода обнаружения атак по сравнению с AI очевиден — высокая вероятность обхода WAF с большим количеством ложных срабатываний (от 5% до 15%). Тем не менее, сигнатурный анализ является основным источником при обучении и обеспечивает базовую защиту веб-приложения на период обучения Nemesida AI.\r\n\r\nАтаки, ложные срабатывания и искусственный интеллект\r\nДля того, чтобы понимать как работает Nemesida AI и какие возможности предоставляет, рассмотрим несколько примеров.\r\n\r\nБлокирование атаки сигнатурным методом\r\nПример атаки, которая будет заблокирована сигнатурным методом. Такой запрос будет заблокирован из-за вхождения цепочки сигнатур «UNION + SELECT»:\r\n\r\nПример 1 - эксплуатация SQL InjectionPOST /wp-content/plugins/answer-my-question/modal.php HTTP/1.1\r\nHost: vulns.pentestit.ru\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:56.0) Gecko/20100101 Firefox/56.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 113\r\nCookie: _ym_uid=1505734077122804829; _ym_isad=2; _ym_visorc_45042173=w\r\nConnection: close\r\nUpgrade-Insecure-Requests: 1\r\n\r\nid=0+UNION+SELECT+1%2C2%2C3%2C4%2C5%2C6%2Cslug%2Cterm_group%2Cname%2C10%2C11%2C12+\r\nFROM+wp_terms+WHERE+term_id%3D1\r\n\r\nВ этом примере запрос будет заблокирован сигнатурным модулем Nemesida WAF, не смотря на частичную обфускацию:\r\n\r\nПример 2 - эксплуатация SQL Injectionaction=getTopic&topic_id=1 anD0 unio%4e %0a sELEc%74 %23%0a 0b001110010011100100111001001110010011100100100000011101010110111001101001011011110110111000\r\n10000001110011011001010110110001100101011000110111010000100000001100010011000100101100011000\r\n11011011110110111001100011011000010111010001011111011101110111001100101000001100000111100000\r\n11001101100001001011000111010101110011011001010111001001011111011011000110111101100111011010\r\n01011011100010110001110101011100110110010101110010010111110111000001100001011100110111001100\r\n10110001110101011100110110010101110010010111110110010101101101011000010110100101101100001010\r\n01001000000110011001110010011011110110110100100000011101110111000001011111011101010111001101\r\n10010101110010011100110010000001101100011010010110110101101001011101000010000000110001001000\r\n0000101101001011010010000000101101,12,13,14,15,16,17,18,1,2 %0a&group_id=0\r\n\r\nid=-1 uniO%6e/*a*/seLEC%74{d1},{d2},{d3},{d4},{d0},{d6},{d7},{d(%23%0aseLEC%74{a0x3c})},NULL,{d10},{d11},{d12}--\r\n\r\nЛожные срабатывания при сигнатурном анализе\r\nТеперь рассмотрим примеры запросов, которые не являются атаками на веб-приложение, но все-же будут заблокированы WAF. Результат обработки такого запроса — ложное срабатывание:\r\n\r\nПример 3 - ложное срабатывание при сигнатурном методе выявления атакGET /function shift() { [native code] } HTTP/1.1\r\nHost: vulns.pentestit.ru\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:56.0) Gecko/20100101 Firefox/56.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nCookie: _ym_uid=1505734077122804829; _ym_isad=2; _ym_visorc_45042173=w\r\nConnection: close\r\nUpgrade-Insecure-Requests: 1\r\n\r\nОбработка запроса ниже также приведет в ложному срабатыванию при использовании сигнатурного метода определения атак:\r\n\r\nПример 4 - ложное срабатывание при сигнатурном методе выявления атакGET /.../news HTTP/1.1\r\nHost: vulns.pentestit.ru\r\nUser-agent: Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nCookie: _ym_uid=1505734077122804829; _ym_isad=2; _ym_visorc_45042173=w\r\nConnection: close\r\nUpgrade-Insecure-Requests: 1\r\n\r\nNemesida AI в действии: повышаем точность определения атак, устраняя ложные срабатывания\r\n\r\nРассмотрим атаки, которые не определятся сигнатурным методом, но будут заблокированы Nemesida AI:\r\n\r\nПример 5 - Payload ObfuscationPOST /wp-content/plugins/answer-my-question/modal.php HTTP/1.1\r\nHost: vulns.pentestit.ru\r\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\r\nAccept: */*\r\nAccept-Language: en-US,en;q=0.5\r\nContent-Type: application/x-www-form-urlencoded\r\nConnection: close\r\nContent-Length: 78053\r\n\r\nid=-1 ([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]])+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(+(!+[]+!+[]+!+[]+[!+[]+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]])+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[+!+[]]])[!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()+[])[!+[]+!+[]+!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]]+(![]+[])[+!+[]])+(![]+[])[+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]]+(![]+[])[+!+[]])+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+[+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]])()[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[!+[]+!+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+!+[]]]+(![]+[])[+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+[+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]])+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[!+[]+!+[]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[!+[]+!+[]+!+[]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[!+[]+!+[]+!+[]+!+[]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+(+(!+[]+!+[]+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]])+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]]+(![]+[])[+!+[]])+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]]+(![]+[])[+!+[]])+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]]+(![]+[])[+!+[]])+(![]+[])[+!+[]]+([][[]]+[])[!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]]+(![]+[])[+!+[]])+(![]+[+![]])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+!+[]+[+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[+!+[]]+[+[]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[+!+[]]+[+!+[]]+[[]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(!![]+[])[+[]]]([[]])+[]+[+!+[]]+[!+[]+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]\r\n\r\n\r\nПримеры ниже (6, 7) не приведут к прямой эксплуатации уязвимости, но способны выявить наличие уязвимостей в веб-приложении, поэтому будут заблокированы Nemesida AI:\r\n\r\nПример 6 - выявление наличия SQL InjectionPOST /wp-content/plugins/testplugin/form.php HTTP/1.1\r\nHost: vulns.pentestit.ru\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\r\nAccept-Encoding: gzip, deflate\r\nCookie: _ym_uid=1501589484566174132; _ym_isad=2; _ym_visorc_45042173=w\r\nConnection: close\r\nUpgrade-Insecure-Requests: 1\r\nContent-Type: multipart/form-data; boundary=\r\nContent-Length: 86\r\n\r\n — Content-Disposition: form-data; name=«id»\r\n\r\n1 AND 1083=1083 AND (1427=1427;\r\n — \r\nПример 7 - Выявление наличия SQL InjectionPOST /wp-content/plugins/testplugin/form.php HTTP/1.1\r\nHost: vulns.pentestit.ru\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\r\nAccept-Encoding: gzip, deflate\r\nCookie: _ym_uid=1501589484566174132; _ym_isad=2; _ym_visorc_45042173=w\r\nConnection: close\r\nUpgrade-Insecure-Requests: 1\r\nContent-Type: multipart/form-data; boundary=\r\nContent-Length: 119\r\n\r\n — Content-Disposition: form-data; name=«id»\r\n\r\n1 AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))\r\n\r\n — \r\nNemesida WAF: до и после обучения\r\nАбсолютную точность в своей работе Nemesida WAF демонстрирует после заверения режима обучения, а до этого момента выявление и блокирование атак будет происходить за счет сигнатурного анализа и цепочек правил. Качественно составленные сигнатуры Nemesida WAF обеспечат достойную защиту веб-приложения на период обучение с минимальным количеством ложных срабатываний.\r\n\r\nКак только Nemesida WAF произведет обработку ~150k запросов (примерно 30 мин. для среднестатистического веб-приложения), режим обучения завершается и Nemesida AI будет активирован. Сигнатурный метод отключается и с этого момента выявление и блокирование атак осуществляется модулем Nemesida AI с точностью в ~99.96%.\r\n\r\n\r\n\r\nЗеленое изображение мозга в личном кабинете свидетельствует о том, что Nemesida AI активирован.\r\n\r\nЗаключение\r\nИспользование машинного обучения в Nemesida WAF позволяет добиться поразительной точности выявления атак (~99.96%), свести к нулю ложные срабатывания (~0.04%) и даже определять атаки нулевого дня (0-day). Кроме этого, Nemesida AI вместе с Nemesida Scanner умеют в автоматическом режиме создавать правила VirtualPatch'а, но об этом я расскажу в следующей статье. \r\n\r\nИскусственный интеллект Nemesida WAF — это мощный инструмент для выявления и блокирования атак на веб-приложения, а не просто маркетинг или конкурентное преимущество. Чтобы ощутить это на практике — запросите предустановленную VM с Trial-версией Nemesida WAF или активируйте облачную защиту на 2 недели бесплатно."
    },
    {
        "title": "Обзор докладов конференции Mobius 2017 Moscow — прыжок веры в мобильные технологии",
        "text": "На этот раз это действительно будет путешествие в прошлое и прыжок в новые технологии, притом одновременно, как, собственно, и в концепте самой игры с перемещением личности во времени. И да, — это отсыл к Assassin's Creed, а не историческому значению термина «прыжок веры».\r\n\r\nИ про игры тоже поговорим, но уже про взрослые. Как сделать приложение только для онлайна, без необходимости загрузки, и наоборот, приложение, которое не требует коннекта к сети. \r\n\r\nВозможно, мне даже пропустят не совсем стандартный формат обзорного поста и картинка со всеми спикерами конференции будет уже после ката. \r\n\r\nА ещё в этот раз у нас не будет открывающего кейноута, т.е. каждый доклад первого тайм-слота — это маленький кейноут, и времени на раскачку не будет. Сразу в прод! \r\n\r\nЧто ждать от докладов на конференции и куда с их помощью можно попасть — под катом. Совпадает ли наше видение с реальностью или нет, решать участникам Mobius 2017 Moscow.\r\n\r\nПрограмма\r\nИтак, для начала ознакомимся со списком докладчиков в общем. Возможно, кто-то вам понравится визуально, и вы сразу прокрутите на него. Но если всё-таки вы — сторонник подхода «узнать все варианты и потом выбрать», то, возможно, в хронологии у вас получится связная история. \r\n\r\n\r\n\r\nПо классической схеме существует несколько вариантов сред доставки личности  информации до пользователя, поэтому мы и поделили все доклады соответствующим образом. Начинаем. \r\n\r\nДоклады про Android\r\n\r\nLisa Wray — Data Binding in a Kotlin world\r\nМат для кого-то — это гимнастический настил, и кому-то не хватает уверенности при прыжке в UI. Что в жизни, что в разработке страхи есть, и, возможно, вы даже уже используете расширения Kotlin и RxJava в роли того самого мата и хотите делать всё чуть быстрее, проще и эффективнее. У нас есть для вас спикер. \r\n\r\nГостья с другой стороны Атлантики готова буквально на пальцах рассказать, как при помощи фреймворка Data Binding значительно уменьшить головную боль с кодом и изменить путь к созданию UI. Лиза не просто Android Google Developer Expert, она — выпускница бакалавриата MIT по музыке и ИТ. Прежде чем начать работать над приложением одного всемирно известного издания, она успела поработать в Google (неожиданно) в команде развития отношений разработчиков Android, Google Glass, Android Wear и т.д. \r\n\r\n\r\nJing Li — Android meets Docker\r\n\r\nJing Li — разработчик-агностик (что бы это сочетание ни значило) с упором на тулы, качество и CI. Возможно краткое интервью сможет сделать картинку более ясной. \r\nCI и так не самый легкий в реализации процесс, и в плане разработки ПО он до сих пор развивается в области мобайл. В докладе Джинга будет введение в Docker и качественно сделанный образ Docker для Android, на основе которого и построена презентация использования последнего для Android CI — с описанием преимуществ, ограничений, фишек и производительности. \r\n\r\nКонечно, будет живое демо по настройке Jenkins Android slave через Android Docker image за 2 минуты (Как бы невероятно это ни звучало). \r\n\r\nВ докладе хватает моментов, которые выглядят как вызов стереотипам. При желании поучаствовать в дискуссии просьба готовить вопросы на английском. *\r\n\r\n*Cам написал, сам перечитал… нет, это не та же статья, что и «Docker, Docker, Docker». \r\n\r\nСергей @willykolepniy Боиштян — Как я возненавидел ORM\r\nРеклама Тинькофф в той или иной мере появляется регулярно, хайпы и т.д. Но в нашей истории примечателен сам спикер, а Сергей уже два года является частью команды разработки мобильного приложения для юридических лиц. При том что в 2013 у него всё начиналось ещё с профессии бармена, Java и бэкенда. \r\n\r\nДоклад Сергея будет о текущем проекте на Android, какие проблемы команде принесла ORM (рост размера базы до умопомрачительных размеров) и как их решали. Обсудим назначение ORM и какие ограничения она накладывает на разработчиков. Цель доклада — заставить рядового разработчика задуматься о целесообразности использования ORM в своем проекте. Технологии, которые будут задействованы: OrmLite, Stetho, DBInspector, Sqlite.\r\n\r\nИван @IvanPonomarev Пономарев — Crash-репорты Android NDK\r\nИван — ведущий программист под мобильные платформы компании Аквелон. Позади более 5 лет опыта в игровой индустрии со специализацией на кроссплатформенной разработке под мобильные устройства с использованием C/C++ (и они работают, например, у компании есть видео об управлении устройством для наливания пива с мобильного телефона). С проблемой сбора информации об ошибках в NDK-коде знаком не понаслышке, об этом и будет говорить. \r\n\r\nВ первой части доклада будут кратко рассмотрены уже имеющиеся наработки: как работает встроенный отладчик Android, какие решения уже существуют.\r\n\r\nВторая часть посвящена рассказу о том, как это работает «под капотом»: как получить состояние процессора на момент ошибки, как раскрутить стек вызовов, как узнать номера строк в исходном коде. Будет дан обзор таких библиотек для раскрутки стека, как libcorkscrew, libunwind, libunwindstack.\r\n\r\nДоклад будет интересен как Android-разработчикам, в чьих приложениях используется NDK, так и всем остальным для расширения кругозора.\r\n\r\nАлексей Буздин — Заставь свой гаджет говорить: Google Assistant\r\nА вот при изучении этого доклада автору, естественно, вспомнилась куча мемов из области Siri, Alexa, Алёнка и Алиса, Amazon Home, Google Home и, в конце концов, шутка про шотландский акцент и голосовое управление лифта… \r\n\r\nВместе с Алексеем будем погружаться в мир Google Assistant.\r\nВ докладе спикер покажет, как начать писать приложения для Google Assistant и тестировать их на Android, iOS и Google Home. В течение 40 минут мы вместе напишем приложение с нуля и отладим его с помощью Google Home.\r\n\r\nВ общем и целом Алексей знает, как организовать сообщество, что он регулярно и делает, устраивая встречи Google Developers Group Riga, Java User Group Latvia и ежегодную конференцию Riga Dev Day.\r\n\r\nЕвгений @smart_jk Сатуров — Instant Apps: как научить приложение работать без установки\r\nНачнём издалека. 4,8 на Google Play — это много или мало? Понятно, что это достаточно условно, но возьмём за гипотезу, что это честный рейтинг, проверенный и добровольный. \r\n\r\nИтак, Евгений — лидер команды Лабиринт Android, той самой, которая первой в России реализовала Instant App и может похвастаться приложением с оценкой 4,8 в Google Play.\r\n\r\nГоворить будем об Instant Apps — возможности использования приложения без необходимости устанавливать его на устройство. В рамках доклада будет рассказано о самой технологии, об опыте реализации, о том, как подготовить проект к внедрению Instant Apps и подводных камнях, с которыми можно столкнуться в процессе. Особое внимание будет уделено вопросу выбора use cases, а также бенефитам, которые дает чистая архитектура в контексте создания Instant Apps.\r\n\r\nEnrique López Mañas — TensorFlow for mobile devs\r\nЭнирике Лопес работает с мобильными технологиями с 2007 года и за это время повидал много хайпов, поэтому знает в них толк. В данный момент идёт хайп вокруг ML и AI, и для того, чтобы быть на волне, он предлагает использовать TensorFlow в роли основного фреймворка от Google. А при условии, что сам Enrique López Mañas является Google Developer Expert и одним из основоположников Google LaunchPad accelerator, то как тут не хайпануть, да ещё и получить выгоду от использования ML. Перед конференцией даже выпущен предварительный пост по его работе, чтобы вы могли успеть подготовиться.\r\n\r\nСергей @Reallife Рябов — Пишем Java-френдли Kotlin-код\r\nСергей Рябов — независимый Android-разработчик с бэкенд-бэкграундом. Несколько лет назад обрёл Kotlin-суперспособности, которые и по сей день использует во благо в своих экспериментах и продакшне. Rx-фанатик, Kotlin-евангелист.\r\nИ как любой евангелист, он готов нести знание в массы. В этот раз о том, почему можно и нужно писать свои библиотеки. Действительно, интероп с Java широко разрекламирован. Однако, в то время как Java-код дёргать из Kotlin можно без особых проблем, работа с православным Kotlin-кодом из Java имеет свои нюансы. Сергей расскажет, что же припасли создатели Kotlin для таких случаев.\r\n\r\nДоклады про iOS\r\n\r\nАндрей @s1dd0k Володин — Как стать GPU-инженером за час\r\nАндрей Володин — lead developer Cocos2d-ObjC, создатель первого приложения на Swift под Android, автор кроссплатформенного игрового движка Fiber2D, в настоящее время — Metal/ARKit-инженер.\r\n\r\nАндрей поможет нам добраться до видеокарты мобильных телефонов. Кто-то может помнить бородатую шутку про «связки Айфонов на колокейшене». В какой-то мере это не шутка. А именно: \r\nСовременный мир не был бы таким, какой он есть, без GPU-вычислений. Современные консольные игры, VR, AR, криптовалюты, машинное обучение — всё это работает на горячих графических процессорах.\r\n\r\nОднако среди мобильных разработчиков видеокарты не пользуются большой популярностью: многие думают, что это очень сложно, а некоторые вообще не замечают, что iPhone в принципе имеет видеокарту.\r\n\r\nС помощью этого доклада хотелось бы ознакомить широкие массы разработчиков с программированием графических процессоров, с прицелом на мобильные платформы и, конечно же, трендовые темы.\r\n\r\nМаксим @max_sokolov Соколов — Мессенджер наизнанку, или Как сегодня сделать мессенджер в мобильном iOS-приложении\r\nПредставьте, что вместо того, чтобы оторвать бумажку с телефоном от объявления на подъезде, можно взять смартфон и сразу написать владельцу напрямую, уточнив статус, не мучаясь с проблемой «трубу не берёт, достали, продали» и т.д. \r\nДля получения подобного мессенджера Максиму Соколову, как Team Lead в Avito, пришлось пройти через все тяжкие, от простого HTTP-API до использования веб-сокетов, узнавая про плюсы, минусы и подводные камни различных подходов. Максим поделится, как его команда проектировала клиент-серверное API и как в этом помогал Swift. Вы узнаете о том, как гарантировать доставку сообщений клиентам, онлайн-статусы пользователей, статусы сообщений и других функциях современных мессенджеров и их реализации.\r\nМессенджеры развиваются стремительно и новый функционал требуется добавлять быстро. В рамках доклада будет рассказано, как заложить масштабируемую архитектуру, которая позволит легко добавлять новые фишки.\r\n\r\nЕвгений @ptiz Камышанов — Жизнь без подключения: от хаоса к консенсусу\r\nСлишком много исторических отсылок получается в ходе обзора. Но что поделать, история движется по спирали: «приложения на десктопе стремятся работать в облаке независимо от локальной памяти», «приложения на телефоне постепенно обретают всё больший оффлайн-функционал».\r\nХорошо это или не очень, можно будет обсудить с Евгением Камышановым из EPAM после его практической демонстрации данного явления в ходе доклада. \r\nПри всём этом, будучи Lead iOS developer в компании EPAM в Санкт-Петербурге, спикер не верит в серебряные пули и по мере сил борется с перфекционизмом. \r\n\r\nMarcin Krzyżanowski — Decipher the encoding\r\nMarcin — это не просто разработчик и автор Natalie, CryptoSwift и ObjectivePGP, но и тот, кто пытается всё же сохранить приватность при помощи PrivacyApp.io Как следствие последнего, про процессы Encoding он знает много… очень много. Конечно, в докладе будет присутствовать не только практика, но и сравнение encoding vs. encryption. Что больше используется в реальной жизни, пояснения с примерами (по большей части на iOS, но не только).\r\nКстати, Marcin с нами не в первый раз и уже был приятно удивлен высоким уровнем нашего комьюнити. Надеемся, в этот раз у него будет возможность укрепиться в вере в high level наших мобильных разработчиков. \r\n\r\nДмитрий @handamade Куркин — Оптимизация размера приложения\r\nИтак, с чем у вас ассоциируется звук «о-оу»? За всех, естественно, говорить не стоит, но для тех, кто начинал до пришествия iPhone — это звук одного мессенджера, который по знаменитости был сопоставим с теперешним Telegram. \r\nК чему это всё? Дмитрий 12 лет занимается разработкой мессенджеров под разные платформы. Последние 5 лет делает iOS клиент для ICQ (звук «о-оу») в должности team lead. \r\nРассмотрим, из чего складывается размер приложения на iOS и как этот размер можно уменьшить. Приведем несколько экспериментов для пояснения, из чего в итоге складывается размер приложения в AppStore, и расскажем про инструменты, которые помогут найти лишние данные и определить наиболее объемные участки кода программы.\r\n\r\nГлеб @Novixon Новик — Архитектура сервисного слоя с использованием составных операций\r\nНаверняка многим знаком подкаст про мобильную разработку Podlodka. Его ведёт Глеб Новик, автор фреймворка COOperation. \r\nДоклад Глеба будет построен вокруг распространенного способа построения сервисного слоя приложения — это использование механизмов GCD для создания асинхронного взаимодействия компонентов. Многие задумываются, но мало кто использует на практике всю мощь классов NSOperation и NSOperationQueue для данной задачи.\r\nС помощью тщательной декомпозиции и небольшой доработки указанных классов можно получить чрезвычайно гибкий и переносимый компонент, который станет верным другом при создании новых сервисов. Глеб расскажет о том, как можно использовать составные операции при построении сервисного слоя и как в этом может помочь разработанный им фреймворк COOperation.\r\n\r\nОбласть общей полезности — уже не среда, а нечто большее\r\n\r\nВладимир @ivlad Иванов — Пустота наследия: стратегия кардинальных улучшений в проекте\r\nВладимир — один из достаточно частых гостей наших конференций, и его должность ведущего разработчика в EPAM этому не причина. Всё дело в использовании круга интересов (Android, React, iOS, Web) и не менее занимательного бэкграунда спикера (начинал как Java EE-инженер, но увлекся мобильным технологиями «и покатился»). \r\nДля начала разомнём мат. аппарат (от слова «мат», а не «математика»). Разберём «Legacy». Каждому разработчику приходится сталкиваться с ним постоянно. Более того, каждый новый проект становится legacy со временем, если не уделять достаточно внимания техническому долгу. В докладе поговорим, как жить с особо запущенным случаем, aka проектом возраста более 5 лет.\r\nМы узнаем:\r\n\r\nкак осознать размер долга;\r\nкак придумать план рефакторинга;\r\nпровести его максимально безболезненно.\r\n\r\nКод будет на Java, но специфики Android почти нет, поэтому интересно будет инженерам обеих платформ.\r\nНемного теории, много практики, щепотка статистики, нескучные картинки — всё, как вы любите.\r\n\r\nКонстантин @Konojoto Якушев — Универсальные ссылки — дворец из подводных камней\r\nПредставление данного спикера хотелось бы начать с введения к докладу его коллеги: \r\n«Кто думает, что Badoo — это поисковая сеть? А кто думает, что это китайский внутренний онлайн-магазин?». Честно, в зале на другой нашей конференции на оба вопроса руки поднимали далеко не единицы. Собственно, и ваш покорный слуга в том числе. Так что жертвами стереотипов могут быть все. \r\n\r\nВ итоге, это самый большой портал по знакомствам (300+ млн. пользователей), бешеное количество обращений и скачиваний. Чем направлять весь этот поток? Константин предлагает отправиться в путешествие в мир универсальных ссылок вместе с ним. Но с большими оговорками: \r\n\r\n«Всё это осложняется тем, что, как только универсальные ссылки запущены, пути назад нет. Нужно их поддерживать, и ваши ошибки, возможно, навсегда останутся с вами».\r\n \r\nА чтобы у вас осталось меньше ошибок «навсегда», мы и предлагаем этот доклад. Мы ожидаем, что человек, прослушавший его, получит достаточно информации, чтобы с нуля запустить современную систему универсальных ссылок в своей компании без проблем и сомнений.\r\n\r\nАлександр @zlx Зимин — Давайте проектировать UI правильно\r\nУже прошло несколько месяцев с того момента, как мы взяли интервью у Александра, которое можно почитать тут. Информация в статье позволит представить спикера в разы лучше, чем тысяча лишних знаков в обзоре, поэтому перейдём непосредственно к докладу. \r\nВ докладе Александр расскажет про подходы к разработке UI, которые позволяют новым разработчикам вносить изменения без переписывания кода и переиспользования написанных компонентов.\r\nТакже часть доклада будет посвящена Atomic Design. Многие популярные приложения используют нестандартные визуальные компоненты, и команда Badoo — не исключение. Чтобы это не создавало много головной боли дизайнерам и разработчикам, им пришлось выработать решение, которое и будет представлено в докладе.\r\n\r\nВне категорий (и законов корпорации)\r\n\r\nДля начала промокод для тех кто дочитал до этого момента (или случайно на него попал) —\r\nиспользуя при регистрации ключевую фразу выше, вы можете приобрести билеты по октябрьской цене по 5 ноября включительно. Если еще не успели зарегистрироваться – это ваш шанс!\r\nИспользовать шанс!LastCallMobius\r\n\r\n\r\nЙонатан Левин — Как самому запилить новую фичу и при этом не быть убитым своим менеджером\r\nУ вас когда-нибудь была ситуация, когда вы работаете в компании над приложением, и внезапно вам в голову приходит идея новой крутой фичи? Вы понимаете, вот он — переломный момент, но когда вы обращаетесь за поддержкой и одобрением на разработку, вы сталкиваетесь с препятствием: «У нас нет ресурсов», или «На данный момент у нас другие приоритеты». Сотрудники, которые не понаслышке знакомы с продуктом компании, больше всего подходят для придумывания и проектирования лучших фич для приложения, но иногда на пути встают политики и процедуры компании. Но где есть желание, там есть возможности! Мир завоёвывают повстанцы и мятежники — Империя должна пасть! Если вы знаете, что эта фича важна, но у вас нет разрешения продолжать, вам придётся осторожно балансировать между свободой творчества и уважением к приоритетам вашей компании. \r\n\r\nВ данном докладе Йонатан поделится, как он разработал фичу без разрешения и как при этом его не уволили/покалечили/убили.\r\n\r\nЙонатан — один из ведущих израильских мобильных разработчиков, часть элитной команды Google Developer Experts. Сыграл ключевую роль в успехе Gett, собравшем более 500 миллионов долларов, а также получил финансирование своего стартапа KolGene, набирающего популярность генетического market connector-а. Будучи верным приверженцем мобильного и продукт-менеджмента, Йонатан также с большим энтузиазмом занимается бэкендом. Как состоявшийся разработчик и предприниматель, он точно знает, как превратить умные идеи в прибыльный продукт. \r\n©Mobius 2017 Moscow (текст-описания доклада Йонатана взят с сайта как самодостаточный и не нуждающийся в сокращении или дополнении) \r\n\r\nНа этом всё с докладами, но не с конференцией. Безусловно, выбрать слот и свой путь можно до начала, следуя программе Mobius 2017 Moscow. Либо просто взять и прийти / взять трансляцию совершив свой «прыжок веры».\r\nЕсли остались вопросы, то их можно задать в комментариях, либо в нашем телеграм-канале Mobiusсonf .\r\nИ если вдруг есть сложности и вы не знаете, как с ними быть, то у нас есть ещё и Ч.А.В.О. \r\nДо встречи на конференции Mobius 2017 Moscow!"
    },
    {
        "title": "Типографика и современный CSS",
        "text": "Пока некоторые CSS свойства, отвечающие за разного рода красивости (вроде filter, mix-blend-mode или transition) привлекают внимание всех и каждого, другие совсем мало освещаются в интернете. Взять хотя бы свойства, отвечающие за типографику. Они весьма полезны и эффектны, но широко не известны. Давайте же исправим несправедливость и осветим то, что обычно остается в тени.\r\n\r\nПравильные переносы слов (hyphens)\r\nС переносом строк в CSS всегда что-то было не так. Вначале у нас было свойство word-wrap, которое вроде бы работает, но числится как черновое и не рекомендуется к использованию. Затем появилось word-break, которое расставляет переносы отталкиваясь исключительно от того, помещаются ли слова в контейнер, да еще не помечает их никакими знаками. Лишь теперь, спустя столько лет, CSS-переносы готовы встать с колен: наконец-то мы можем переносить слова по правилам языка с помощью свойства hyphens:\r\n\r\narticle {\n    hyphens: auto;\n}\n\r\nВозможные значения:\r\n\r\n\r\nmanual — Слова переносятся только в тех местах текста, где добавлен спецсимвол &shy; или тег <wbr>. Используется по умолчанию;\r\nauto — браузер добавляет переносы автоматически на основе встроенного словаря;\r\nnone — слова не переносятся.\r\n\r\n\r\n\r\nВажный нюанс: чтобы словарь переносов заработал, в теге <html> необходимо указать атрибут lang с кодом языка:\r\n\r\n<html lang=\"ru\">\n\r\nТакже этот атрибут можно задать непосредственно в абзаце текста:\r\n\r\n<p lang=\"en\">Some long text</p>\n\r\nРаботает это везде, кроме настольных Chrome и Opera, в них все будет выглядеть как обычно. Но в остальных браузерах мы получим нормальные переносы, так что можете смело пользоваться.\r\n\r\n\r\n\r\nКапитель (font-variant: small-caps)\r\nКапитель — это начертание в гарнитуре, при котором строчные знаки выглядят как уменьшенные заглавные. В CSS его можно задать с помощью свойства font-variant, отвечающего за представление строчных букв. Доступные значения:\r\n\r\n\r\nnormal — значение по умолчанию;\r\ninherit — наследует значение родителя;\r\nsmall-caps — то, что нас интересует. Отображает все строчные символы как заглавные, но уменьшенного размера.\r\n\r\nh1 {\n    font-variant: small-caps;\n}\n\r\nВыглядит это весьма интересно:\r\n\r\n\r\n\r\nFont-variant давно поддерживается во всех браузерах. Поиграться с другим текстом или шрифтом можно здесь:\r\n\r\n\r\n\r\nПродвинутое оформление подчеркиваний (text-decoration-skip)\r\nО свойствах text-decoration-style и text-decoration-color я уже писал. Но существует еще одно: text-decoration-skip. Оно включает пропуск выносных элементов в подчеркиваемом тексте, что выглядит довольно-таки эффектно. \r\n\r\n\r\n\r\nСвойство может принимать несколько значений, но более-менее работают только:\r\n\r\n\r\nink — подчеркивающая линия пропускает буквы, заходящие за базовую линию;\r\nobjects — значение по умолчанию. Линия пропускает такие объекты, как изображения и inline-block элементы\r\n \r\na {\n    text-decoration-skip: ink;\n}\n\r\nРаботает в Chrome, Opera и Safary (причем, Safari на маке по-умолчанию использует text-decoration-skip: ink).\r\n\r\n\r\n\r\nОформление кавычек (quotes)\r\nА вы знали, что в CSS можно задать формат всех кавычек, использующихся на сайте? Для этого есть специальное свойство quotes. Оно применится к содержимому тега <q>, а также к псевдоэлементам со свойством content равным open-quote или close-quote.\r\n\r\n\r\n\r\nq {\n    quotes:  \"«\" \"»\";\n}\n\r\n\r\n\r\nq {\n    quotes: \"“\" \"”\";\n}\n\r\n\r\n\r\nq {\n    quotes: \"\\0022\" \"\\0022\";\n}\n\r\nСвойство давно поддерживается всеми браузерами.\r\n\r\n\r\n\r\nТюнинг многоколоночных текстов (orphans и widows)\r\nСвойства orphans и widows можно назвать аутсайдерами. Вот, например, что об одном из них написано в документации Mozilla:\r\nСвойство widows CSS определяет какое минимальное количество линий должно быть оставлено в начале новой страницы на paged носителе. В типографике, «висячая» строка (widow) это последняя строка параграфа, оказавшаяся в начале следующей страницы. Установка свойства widows позволяет предотвратить висячие строки.\r\n\r\nНа нестраничных носителях, таких как screen, CSS свойство widows не имеет эффекта.Выглядит как что-то бесполезное для 99.9% разработчиков. Скажите, как часто вам приходилось им пользоваться? Если такое случалось хотя бы один раз, пожалуйста, напишите об этом в комментариях.\r\n\r\nНо это не все, на что способны эти свойства! Почему-то мало где описано, что они работают и для многоколоночных макетов!\r\n\r\n\r\n\r\narticle {\n  columns: 2;\n  orphans: 10; /* минимальное число строк для всех столбцов, кроме последнего */\n}\n\r\n\r\n\r\n\r\narticle {\n  columns: 2;\n  widows: 5; /* минимальное число строк для последнего столбца */\n}\n\r\nСразу возникает вопрос: «А что если для блока указать оба свойства? Не начнут ли они конфликтовать?». В таких случаях widows имеет приоритет и учитывается в первую очередь.\r\n\r\nВ контексте стилизации страниц свойства давно работают везде, кроме, Firefox. Применительно к стилизации колонок они не работают в IE/Edge.\r\n\r\n\r\n\r\nКак видите, среди малоизвестных свойств можно найти много полезного. Не за горами свойства для более тонкой настройки переносов, потока текста для разных блоков (CSS Regions), оформления врезок (CSS Exclusions) и многое другое. \r\n\r\nЕсли вы знаете другие типографические новинки в HTML и CSS, которые уже работают в браузерах, пожалуйста, пишите в комментариях!"
    },
    {
        "title": "Что не так с уязвимостями в C# проектах?",
        "text": "Эта небольшая заметка является промежуточным итогом на тему поиска уже известных уязвимостей в open source C# проектах. Я хотел посмотреть на примеры кода, который бы являлся уязвим и был причиной появления очередной CVE, но оказалось, что не всё так просто…\r\n\r\nПредыстория (уязвимости в C/C++ проектах)\r\nЯ уже сталкивался с подобной задачей касаемо языков программирования C и C++, и хотел бы сделать небольшую отсылку к проделанной ранее работе, чтобы суть вопроса, вынесенного в заголовок, стала более понятна.\r\n\r\nВдаваться в детали не буду, расскажу в нескольких предложениях. Предыдущая цель была аналогичной — посмотреть, какие CVE были обнаружены в open source C/C++ проектах, и выяснить, может ли PVS-Studio находить подобные проблемы. По результатам работы я нашёл несколько интересных уязвимостей (а если бы продолжил работу в этом направлении, уверен, нашёл бы ещё больше), появления которых можно было бы предотвратить, используя PVS-Studio. Эксперимент закончился удачно, и на его основе я написал статью \"Как PVS-Studio может помочь в поиске уязвимостей?\".\r\n\r\nУдобным было то, что в описании CVE часто фигурировали ссылки на коммиты, закрывающие уязвимость. Таким образом, просматривая историю изменений кода, можно было понять, в чём заключается уязвимость, и каким образом она была закрыта. В итоге задача сводилась примерно к тому, чтобы среди таких исправлений найти что-то интересное.\r\n\r\nПодводя итог вышесказанному, можно выделить несколько пунктов, которые определяют CVE, удобную для проверки:\r\n\r\n\r\nСодержит ссылку на исходный код (до и после исправлений).\r\nКоммит является локальным, то есть не 'размазан' по нескольким файлам, а затрагивает вполне определённое место.\r\nКод в этом месте связан с использованием каких-то общедоступных средств, а не специфичных для конкретного проекта (например, каких-то функций, заменяющих их стандартные аналоги).\r\nУязвимость не является следствием специфичной ошибки в логике работы приложения.\r\n\r\nЕсли CVE отвечает этим требованиям, скорее всего она будет доступна для обнаружения с помощью статического анализа исходного кода.\r\n\r\nУязвимости в C# проектах\r\nВ направлении поиска уязвимостей в open source C# проектах я предпринимал несколько заходов с различных сторон, но все они не принесли ожидаемого результата.\r\n\r\nОсновными информационными средствами, на которые я ориентировался, были база CVE и сайт CVE Details (а также Google, GitHub, reddit, StackOverflow).\r\n\r\nВот основные подходы, которые я использовал:\r\n\r\n\r\nПоиск наиболее популярных C# проектов с GitHub в базе CVE. C# проекты на GitHub были отсортированы по количеству 'звёздочек', после чего я 'пробил' по базе CVE порядка 100 проектов — большая их часть даже не упоминается.\r\nБыла написана небольшая утилита, которая просканировала базу CVE, нашла все ссылки на GitHub (их оказалось больше 5000), и 'выцепила' из них те, которые являлись ссылками на коммиты, затрагивающие C# (.cs) файлы. На моё удивление, таких ссылок оказалось всего 8! Этого явно было недостаточно. Кроме того, не все коммиты подходили под описанные в предыдущем разделе критерии «оптимальности».\r\nПоисковым запросом на GitHub среди issues всех C# проектов с количеством 'звёзд' больше 10 выбрал те, которые в названии, теме или комментариях содержали слово «CVE». Опять мимо — в большинстве случаев конкретные CVE не рассматривались, либо не было ссылок на коммиты с исправлениями.\r\nПеребирал проекты из списка .NET Open Source Developer Projects. Искал их в базе CVE, на сайте CVE Details, в Google.\r\nПрошёлся по базе CVE поиском по определённым ключевым словам, вроде C# или .Net.\r\nПоиск в Google по идентификаторам различных CVE из базы CVE и с сайта CVE Details.\r\nДополнительно искал в Google информацию по различным поисковым запросам, связанным с уязвимостями C# / .Net и open source проектами.\r\n\r\nК моему большому удивлению, все эти подходы не принесли ожидаемого результата — было найдено крошечное количество уязвимостей, в которых были бы также ссылки на исходный код, чтобы можно было точно понять суть проблемы.\r\n\r\nИмея опыт подобной работы с проектами на C/C++ меня вот что удивило:\r\n\r\n\r\nМалое количество задокументированных уязвимостей С# проектов в базе CVE в принципе. Неужели C# проекты почти не подвержены уязвимостям? Не очень верится. Или просто уязвимости в C# коде не документируются/афишируются, поэтому их так мало в базе CVE?\r\nУязвимость есть в базе CVE, есть ссылка на релиз, в котором уязвимость была закрыта (что само собой уже подтверждает её наличие), но при этом нет никаких упоминаний уязвимого кода, даже при том, что это open source проект! Повторюсь, в C/C++ проектах, как правило, были ссылки на конкретные коммиты, закрывающие уязвимости. Т.е. разработчики сообщали не только о том, что уязвимость была закрыта, но и демонстрировали саму проблему и способ её решения.\r\n\r\nЗаключение\r\nВ общем, я был удивлён таким положением дел в отношении уязвимостей в C# проектах. Почему их так мало? Почему мало примеров уязвимостей, которые были закрыты?\r\n\r\nСитуация действительно такая, какая есть? Или был какой-то изъян в моих подходах, которые не позволили получить необходимого результата?\r\n\r\nЕсли у вас есть примеры разбора уязвимого кода (задокументированного, то есть, имеющего идентификатор CVE) или вы заметили какой-то явный изъян в моём подходе, не позволивший получить ожидаемых результатов, прошу написать мне на почту — vasiliev@viva64.com, с интересном прочитаю ваши предложения/замечания.\r\n\r\nСписок найденных уязвимостей\r\nНиже я привожу список тех уязвимостей, которые бы имели и идентификатор CVE, и примеры уязвимого кода. Возможно, они будут кому-то интересны/полезны. Также, если вы хотите предложить в письме ссылку на пример кода уязвимостей, пожалуйста, посмотрите, не встречается ли идентификатор этой уязвимости в нижеприведённом списке.\r\n\r\n\r\nCVE-2017-15280\r\nCVE-2017-15279\r\nCVE-2015-8814\r\nCVE-2015-8813\r\nCVE-2013-6795\r\nCVE-2012-3382\r\nCVE-2011-0991\r\nCVE-2015-2526\r\nCVE-2016-0132\r\nCVE-2017-8759\r\nCVE-2017-8585\r\n\r\n\r\n\r\nЕсли хотите поделиться этой статьей с англоязычной аудиторией, то прошу использовать ссылку на перевод: Sergey Vasiliev. What Is Wrong with Vulnerabilities in C# Projects?\r\n\r\nПрочитали статью и есть вопрос?Часто к нашим статьям задают одни и те же вопросы. Ответы на них мы собрали здесь: Ответы на вопросы читателей статей про PVS-Studio, версия 2015. Пожалуйста, ознакомьтесь со списком."
    },
    {
        "title": "DotNext 2017 Moscow: возвращение хардкора",
        "text": "12-13 ноября (то есть всего через пару недель) состоится DotNext 2017 Moscow, крупнейшая в России конференция, посвященная разработке на платформе .NET. Среди наших докладчиков — ведущие отраслевые эксперты из России, Европы и США. Основные темы конференции — внутренности работы платформы (CLR, GC, JIT), лучшие практики по использованию инструментов, профилирование и оптимизация производительности, многопоточное программирование, нововведения платформы, решения сложных кейсов. \r\nПод катом — детальный разбор программы, несколько слов о нововведениях этого года и секретный промокод со скидкой.\r\nВозвращение хардкора\r\nВо-первых, изменения коснулись состава докладов.\r\nПрошлый DotNext в Питере проводился в удивительное время — вышло или готовилось к выходу множество новых технологий. Почти все доклады были про это, что автоматически означало уменьшение сложности материала. Как показал опрос, людей не особо интересовали идеи типа копания во внутренностях GC и починки разваливающихся профилировщиков (любимые занятия джавистов), но очень интересовало, как внедрить безумно хайпанувшие Doсker и Kubernetes в готовую .NET-инфраструктуру. Просто было такое время.\r\nНа DotNext 2017 Moscow хардкор возвращается назад. Копаться в GC мы все так же не собираемся — зато собираемся обсуждать модель памяти, performance-тестирование и оптимизации, тонкости отладки, и даже отладки на Линуксе. Для особых ценителей есть два доклада об использовании функционального программирования. Теперь хардкорных докладов — ровно треть от общего количества.\r\nВпрочем, обсуждение «нормальных» вопросов и инструментов никуда не делось. Есть большой блок докладов о кластерной и облачной инфраструктуре, есть обсуждение тулов и методов их использования (типа практики кодогенерации), есть кое-что о девопсе и обеспечении безопасности, и так далее. Каждый найдет себе тему по вкусу.\r\nСовершенно очевидно, что такой объем информации не поместится в один день, поэтому теперь DotNext занимает два дня и три параллельных трека. Открытие происходит в 10 утра (в первый день регистрация с 9 часов), закрытие — в 7 вечера, т.е. по 9 часов на каждый трек. Чтобы мозги не расплавились от такого объема, можно запланировать посещение не только максимально сложных докладов, но разбавить их более лайтовыми. А вот как попасть на всё, что запланировал — об этом будет написано ниже.\r\nВкалывают роботы, а не человек\r\nВо-вторых, мы подключили тяжелую артиллерию и проанализировали распределение докладов по трекам с помощью специального самописного софта. Мы решаем следующую задачу: допустим, человек захотел пойти на 3 заранее известных доклада. Как сделать так, чтобы они произошли в разное время, чтобы между ними не пришлось выбирать?\r\nЗа основу взят OptaPlanner — универсальный солвер бизнес-ограничений. Он специально создан для решения задач типа маршрутизации автомобилей, распределения сотрудников по задачам, оптимизации облачных вычислений, упаковки товаров и так далее. Все эти задачи объединяет то, что они похожи на решение головоломки, в которой нужно перераспределять ограниченные ресурсы по соответствующим потребителям. Примерно такая же задача возникает при планировании распределения докладов.\r\nПоверх OptaPlanner был написан свой движок под названием ConfPlanner. В особенности за это нужно поблагодарить Владимира Ситникова. Владимир — перфоманс-архитектор в NetCracker и участник программных комитетов JUG.ru Group. В результате получился открытый проект, посмотреть исходники которого можно на гитхабе.\r\nСуть в том, что мы задаем ограничения в виде YAML-файла и на выходе получаем готовое решение.\r\ncapacity: 400\nlanguages:\n- name: ru\n- name: en\nrooms:\n- name: 1\n  capacity: 300\n- name: 2\n  capacity: 200\ndays:\n- name: 1\n  date: 2017-10-04\ntimeslots:\n- name: 1\n  day: 1\n  start: 11:00\n  duration: 50\n- name: 2\n  day: 1\n  start: 14:00\n  duration: 50\n- name: 3\n  day: 1\n  start: 18:00\n  duration: 50\ntopics:\n- name: Case study\n- name: Tricks\nspeakers:\n- name: Speaker A\n  arriveTime: 2017-10-04T12:00:00+03:00\n- name: Speaker B\n  leaveTime: 2017-10-04T16:00:00+03:00\ntalks:\n- name: 'How to arrive late'\n  language: en\n  speakers: Speaker A\n  topics: Tricks\n- name: 'How to depart early'\n  language: ru\n  speakers: Speaker B\n  topics: Tricks\n- name: 'Coffee time'\n  language: en\n  speakers:\n  - Speaker A\n  - Speaker B\n  topics:\n  - Case study\n  - Tricks\r\nТеперь самое крутое: можно учитывать не только элементарные ограничения типа времени проведения, но и данные опросов. Тех самых опросов, где вы указываете, на какие доклады собрались пойти.\r\nНапример, человек хочет пойти на 3 доклада и так получилось, что они выстроились «в одну линию» (совпадают по времени). Такая комбинация допустима, но за нее начисляются штрафные баллы. Суть решения задачи составления оптимального расписания докладов — минимизация функции начисления штрафа. \r\nКонечно, после того как ConfPlanner высказал свои замечания, расписание хорошо обдумывается живыми людьми. Как видите, заполнять опросы — полезно. Ваше мнение действительно учитывается, в самом прямом смысле.\r\nОбещанный секретный промокод\r\nВначале я хотел вставить промокод куда-нибудь в завершающую часть статьи, или в середину списка докладов, чтобы его пришлось немножко поискать. Быстро выяснилось, что количество докладов достаточно велико, чтобы его не нашел никто. Поэтому вот, держите код:\r\nLastCallPromoИспользовав этот код на странице регистрации, можно получить скидку до конца недели.\r\nСодержание программы\r\nТеперь давайте пройдемся по докладам и посмотрим, о чем будет эта конференция. Условно все доклады можно разделить на следующие группы:\r\n\r\nПерфоманс и низкоуровневые подробности\r\n\r\nСетевой код\r\nОтладка\r\n\r\nКластеры и облака\r\n\r\nТранспортные системы\r\n\r\nЯзык, инструменты и методы программирования\r\n\r\nФункциональное программирование\r\n\r\nРазное\r\n\r\nМашинное обучение и матчасть\r\nБезопасность\r\nМониторинг, эксплуатация и DevOps\r\nФилософия (!)\r\n\r\n\r\nВажно отметить, что это деление условное. Сами по себе доклады не привязаны к какой-то жесткой классификации. Можно было бы сгруппировать их как-то иначе, например, по используемому фреймворку. Однако приведенная выше структура обладает отличным свойством: она помогает выбрать, на какой доклад идти.\r\nПерфоманс и низкоуровневые подробности\r\nКейноут: Поговорим про performance-тестирование\r\nАндрей Акиньшин, JetBrains\r\n У кейноута есть несколько целей, в том числе — передать дух и суть того, что будет твориться ближайшую пару дней. Этот доклад будет посвящен типичным проблемам тестирования производительности и возможным подходам к их решению. Андрей Акиньшин работает над проектом Rider, является мантейнером BenchmarkDotNet и вообще — знает толк в микрооптимизациях.\r\n\r\n\r\nPatterns for high-performance C#: from algorithm optimization to low-level techniques\r\nFederico Lois, Corvalius\r\n В этом докладе мы рассмотрим техники и паттерны, используемые для написания высокопроизводительного кода — начиная с анализа и вплоть до конкретного воплощения оптимизации. Разберемся, как понять, какие оптимизации нужно использовать, и какие проблемы обычно возникают при оптимизации кода базы данных. Многие из этих приёмов были придуманы и заполированы до зеркального блеска при разработке RavenDB 4.0 — свежей версии NoSQL движка для платформы .NET. RavenDB — это довольно сложная штука, в которой оптимизации давно идут на наносекунды, и оптимизировать приходится по времени, IO и процессору одновременно. Большинство обсуждаемых в этом докладе приемов можно применить где угодно, вне зависимости от языка или фреймворка.\r\nФедерико прошел большой путь, чтобы иметь возможность рассказать о своих открытиях. Он не только является сооснователем компаний Corvalius и Codealike, но и реально работал над перфомансом алгоритмов последние десять лет, в качестве железа используя как CPU, так и всевозможное хитрое железо вроде GPU. Это человек, которого не пугает работа с бинарными данными, регистрами и низкоуровневой оптимизацией, и одновременно увлеченный технологиями параллелизма и современной компьютерной графикой. В общем, если кто и может рассказать доклад о низкоуровневых оптимизациях на C#, то это именно он.\r\n\r\n\r\nМодель памяти .NET\r\nВалерий Петров, Sidenis\r\n У кого-то еще остались вопросы после доклада Федерико? Может, кого-то пугает concurrency (и не зря)? Валерий Петров облегчит нашу участь подробным рассказом о модели памяти.\r\nИнтересно, что на работе Валерий в основном занимается «кровавым энтерпрайзом», и существует миф, что «энтерпрайзные» программисты такими вещами не интересуются, не разбираются в них, и вообще на работе это не нужно. Ну что ж, миф разрушен!\r\nТак в чем же дело и почему это нас вообще должно интересовать? Программы обычно пишутся людьми, а исполняются компьютером. За время существования ЭВМ была проделана огромная работа по снижению порога вхождения в программирование: сейчас не требуется знать, как работает компьютер, чтобы суметь заставить его сделать какое-то действие. Однако ничего не даётся даром, и за высокоуровневыми языками скрыто много восхитительных вещей. В некоторых случаях незнание того, что творится «внизу», может приводить к печальным последствиям. А когда речь идёт о concurrency и кроссплатформенности, то и вовсе кругом драконы с подводными граблями.\r\nВ этом докладе Валерий расскажет, что такое модель памяти, какая она в .NET, что нам гарантирует спецификация, что даёт платформа, какие можно ожидать проблемы при выходе из зоны комфорта: уход в сторону lock-free, запуск на других архитектурах (например, ARM). Также будет показано, что некоторые проблемы могут быть найдены несложным статическим анализом (доклад не про статический анализ, поэтому подробности отдельно). Среди прочего, будет показано, что в .NET тоже бывают баги.\r\n\r\n\r\nПоединок: .NET Core против Java\r\nВиталий Езепчук, Фаст Репортс\r\n Даже в перфоманс-разделе существуют приятные легкие доклады. В этом докладе Виталий займется сравнением производительности рантаймов .NET Core и Java, в операционных Linux и Windows. Целевая аудитория: разработчики высокопроизводительных и ресурсоёмких приложений… Ну или кто угодно, кому интересно посмотреть, как .NET порвет Java на британский флаг. (А вдруг не получится?)\r\n\r\n\r\n High performance Networking in .NET Core\r\nKarel Zikmund, Microsoft\r\n В топе, посвященном производительности, есть два доклада про производительность сети.\r\nПервый из них ведет англоязычный спикер Karel Zikmund, известный тем, что является Software Engineering Manager в командах .NET Framework team и .NET Core, и является менеджером CoreFX по направлениям Networking, Crypto, Collections, Process, и т.п.\r\nKarel расскажет об архитектуре и конкретной реализации сетевого стека .NET Core, в особенности — о производительности и переносимости. Будут освещены следующие темы:\r\n\r\nОсновные идеи и цели, лежащие за архитектурой и реализацией сетевой подсистемы\r\nКакой прогресс был достигнут, какое состояние текущей разработки\r\nКак добиваются максимальной производительности\r\nТекущие результаты работ по улучшению производительности + сравнение относительно различных технологий и операционных систем\r\n\r\n\r\n\r\nApproaches for application request throttling\r\nMaarten Balliauw, JetBrains\r\n Второй доклад, касающийся произвольности сети. Возможно, его стоило отнести к «облакам», про которые написано ниже.\r\nMaarten давно заметил, что пользователи — очень странный народ. По крайней мере, в его проекте MyGet.org творятся дикие вещи. Если сильно повезет, пользователи действительно воспользуются сервисом, но скорей всего, они будут злоупотреблять доверием всеми возможными способами. Они используют его странно и необычно, от чего растет нагрузка, запросами заливает сразу же после окончания выходных, и т.п. Все это — реальная опасность для веб-приложения, оно может помешать как работе одного-единственного пользователя, так и положить весь сервис целиком. Поэтому в идеале, нужно иметь какую-то умную систему фильтрации, поджидающую пользователя на входе, и контролирующую количество запросов в единицу времени, объем трафика, и так далее. \r\nВ этом докладе Maarten расскажет о простом, и одновременно — таком сложном мире ограничителей запросов. Мы должны решить, что именно и где ограничивать — в приложении, на сервере, на реверс-прокси типа nginx, на внешних сервисах типа Azure или CloudFlare и так далее. В результате и волки сыты, и овцы целы — и сервис работает нормально, и пользователи счастливы.\r\n\r\n\r\nDebugging and Profiling .NET Core Apps on Linux\r\nSasha Goldshtein, Sela Group\r\n В нашей хардкорный «низкоуровневой» секции есть два доклада, касающихся отладки. И оба — про кроссплатформенные приложения.\r\nПервый доклад ведет Саша Гольдштейн — выдающийся перфоманс-инженер, неизменно занимающий топовые позиции на всех конференциях, где бы он ни выступал. Мы несколько раз брали у него интервью, советую ознакомиться: пара видеозаписей 2015 года, видеозаписи 2016 года, интервью о работе с перфомансом и обзор инструментов .NET перфоманс-инженера.\r\nВ этом докладе Саша расскажет примерно о следующем. Представьте, что-таки удалось запустить на Linux ваше любимое ASP.NET-приложение или даже что-то с консольным интерфейсом. Что дальше? Счастливый конец? О, нет. По факту, придется встретиться с утечками памяти, странными падениями, проблемами с производительностью и многими другими неприятностями — и что делать, когда всё это происходит на продакшне? На Windows у нас есть куча интересных инструментов, но в Linux они работать не будут, и простых альтернатив пока не существует. В этом докладе Саша расскажет о том как сейчас выглядит отладка и профилирование приложений .NET Core на Linux. Как проводить расследования с помощью perf, как LTTNG используется в качестве замены для событий ETW, как собирать и понимать трейсы LTTNG, и многое другое. Саша расскажет о сборе core dumps, и как достать из них интересную для .NET-разработчика информацию с помощью lldb и SOS. Этот доклад будет очень непростым путешествием сквозь дебри недоделанных утилит и особой магии командной строки, но в конце концов мы приедем к счастливому концу! (но это не точно).\r\n\r\n\r\nТонкости отладки Mono-приложений\r\nЕлизавета Голенок, Готех\r\n Второй доклад об отладке, и снова кроссплатформа. Впрочем, после доклада Саши уже понятно, что на Линуксе простой жизни нам не видать :-)\r\nЭтот доклад — сугубо практический. Одна из реальных рабочих задач Елизаветы на этот год — сделать существующий legacy-проект (WCF, Web API, MVC, Web Forms) кроссплатформенным. Задача эта достаточно классическая, однако, в процессе переноса возникает множество проблем, одна из которых — отладка Mono-приложений.\r\nЕлизавета расскажет, как сделать процесс отладки Mono-приложений более удобным/комфортным, покажет, как в действительности происходит процесс отладки. По ходу дела мы познакомимся со следующими технологиями:\r\nОтладчики:\r\n\r\nSoft Debugger;\r\nGNU Debugger для решения низкоуровневых проблем;\r\nLLDB;\r\n\r\nПрофайлеры:\r\n\r\nMono Log Profiler;\r\nValgrind;\r\nHeapShot;\r\n\r\nКроме того, будет сравнение этих инструментов с аналогами, используемыми для отладки классических .NET-приложений и .NET Core.\r\n\r\n\r\nКластеры и облака\r\nОдна из наиболее хайповых тем последних лет наносит ответный удар, являясь чуть ли не самым большим блоком этой конференции. Здесь крутится бешеное количество новых технологий, фреймворков, секретных ноу-хау и так далее. Профессионалов, которые могут рассказать свои ноу-хау, впрочем, куда меньше — и мы собрали их всех!\r\nНазад в будущее: построение эффективных облачных сервисов с помощью Orleans\r\nСергей Быков, Microsoft\r\n Этот доклад посвящен Microsoft Orleans — фреймворку, разработанному в Microsoft Research. \r\nРасскажет о нем руководитель разработки Orleans. Сергей Быков начинал проект Orleans в Microsoft Research и продолжает руководить его разработкой в open source в подразделении Xbox. \r\nOrleans предоставляет радикально новый подход к построению систем, который даёт разработчикам эффективность stateful-архитектуры и массу других важных преимуществ через простую и интуитивную модель программирования. Orleans успешно применяется в играх-блокбастерах Halo, Gears of War, Age of Empires, в Skype, Azure и других системах Microsoft, для IoT, финансового анализа и во многих других сферах. Клоны Orleans, созданные для JVM, Go и Erlang, являются лишним подтверждением успеха Orleans.\r\n\r\n\r\nI have a microservices architecture and I didn't know\r\nDino Esposito, JetBrains\r\n Как вы уже знаете, микросервисы — вертикальные слои функциональности, независимые друг от друга с точки зрения технологий, парадигм, и даже, в какой-то мере — данных. Как и любой другой изолированный модуль, микросервис можно легко заменить или переписать, или даже горизонтально масштабировать без риска возникновения регрессий. Микросеврисы могут являться слабосвязанной частью распределенной архитектуры, но их можно использовать и по-отдельности, сами по себе. У такой архитектуры множество плюсов, и не так много минусов. Что важнее, она встречается гораздо чаще, чем об этом принято говорить. «Микросервисы» — это просто специальное название для чего угодно, что не является хорошо проработанной, всеобъемлющей системой. \r\nВ этом докладе Дино поделится с нами болезненным опытом разработки микросервисной архитектуры, в ходе которой его компания строила инфраструктуру во множество этапов, имея на руках очень ограниченные ресурсы, по кирпичикам собирая результат — и стараясь, чтобы при добавлении новых крипичиков, старые не отваливались на ходу. \r\nДино — известный тренер, консультант и евангелист, CTO быстро развивающейся IT-компании. Он написал множество известных книг для Microsoft Press. Этот доклад продолжает славную традицию, по которой Дино рассказывает, как правильно превозмогать весь этот беспорядок, который мы сами наворотили.\r\nНапоминаю, что у Дино есть еще один доклад — завершающий кейноут, на него определенно стоит сходить.\r\n\r\n\r\nServerless compute with .NET based Azure Functions\r\nAlex Thissen, Xpirit\r\n Если уж мы заговорили о облаках и микросервисах, первая ассоциация из мира продуктов Microsoft — это Azure.\r\nAzure Functions можно использовать для создания бессерверных облачных сервисов, и по сути — это новая ступень эволюции распределенных вычислений и хостинга. Для того, чтобы объяснить нам детали использования этой технологии, к нам приезжает Alex Thissen — консультант по разработке современных распределенных приложений, 10-кратный обладатель MVP, и конечно — эксперт в Azure Functions.\r\nВ этом докладе Алекс покажет, как разрабатывать с помощью Azure Functions и C#, и как все это потом собирать, тестировать и деплоить на Azure. Будут разобраны детали программирования на .NET, подробности архитектуры и внутренней реализации. Кроме того, Алекс покажет, как все это запустить и хостить на локальной машине, так что сразу после доклада вы сможете самостоятельно придумывать и писать крутые приложения с использованием Azure Functions.\r\n\r\n\r\n12-factor apps in .NET Core\r\nIan Cooper, Huddle\r\n Вы, наверное, уже слышали о Cloud Native: о continuous deployment и простом масштабировании серверного кода. Вы слышали о Docker и микросервисах. Но что такое «12-факторные приложения», о которых идет речь в заголовке? Эта методология, изначально выработанная инженерами, занимавшимися разворачиванием на Heroku, является «рецептом успеха» при написании кода для любых облачных платформ. В этом докладе описывается суть метода и демонстрируется, как написать для .NET приложение, которое соответствовало бы всем требованиям этого метода. Абсолютно точно будут живые примеры с использованием ASP.NET Core, обрисованы светлые и темные стороны приложений, построенных подобным образом; будет показано как это можно развертывать и без сервера, и с использованием Azure Service Fabric.\r\nК концу доклада вы обретете более глубокое понимание Cloud Native, а поможет вам в этом Ian Cooper  — архитектор из Лондона с более чем 20-летним стажем, основатель #ldnug и известный спикер, специализирующийся на вопросах правильной архитектуры, паттернов и хороших практик проектирования.\r\n\r\n\r\nApache Kafka и реактивные микросервисы на .NET Core\r\nДенис Иванов, 2ГИС\r\n Среди «облачных» докладов выделяется группа из трех историй, посвященных транспортным системам. Сложно было в этом обзоре докладов не поставить на первое место Кафку — такую популярную и любимую в .NET сообществе. \r\nНа всякий случай напомним, что Apache Kafka — это open source-платформа для обработки потоков сообщений. Абстракция распределённого лога, лежащая в основе Kafka, даёт возможность использовать её в качестве системы очередей, но при этом даёт некоторые очень полезные преимущества, недоступные даже решениям ESB-уровня.\r\nВ этом докладе мы, под чутким руководством Дениса Иванова, разберём основные принципы, на которых построена Apache Kafka, узнаем, как и в каких случаях её использование позволяет решать задачи просто и эффективно.\r\nНо самое главное, мы рассмотрим реальное применение Apache Kafka в системе, имеющей микросервисную архитектуру и бэкенды которой реализованы на .NET Core и Scala. Будет рассказано про замечательную библиотеку Reactive Extensions и показано, как применение реактивного подхода позволяет сохранить код простым, надёжным и крайне производительным.\r\nВ докладе не забыты особенности и нюансы, которых всегда очень много, когда мы делаем микросервисные приложения, да ещё с таким набором технологий. Будет описан реальный опыт, полученный в большом проекте. Денис работает в 2ГИС над системами продаж и рекламными сервисами, пишет код на C# в Windows и macOS, а компилирует его и разворачивает приложения в Linux — поэтому не понаслышке знает, о чем говорит. Нам, слушателям доклада, всё это позволит быстро сориентироваться, если потребуется решать похожие задачи.\r\n\r\n\r\nNServiceBus or MassTransit? .NET ServiceBus frameworks compared\r\nRoland Guijt, R.M.G. Holding B.V.\r\n Продолжая тему архитектур с использованием передачи сообщений для реализации микросервисов, нужно вспомнить о сервисных шинах. Есть несколько вариантов, но как между ними выбрать? Для .NET есть MassTransit и NServiceBus, и обе они работают замечательно. Но несмотря на внешнее сходство, у них есть и существенные отличия.\r\nВ этом докладе Рональд проведет нас по основным фичам и API MassTransit и NServiceBus, подмечая сходства и различия. В конце этого соревнования мы сможем выбрать победителя — того, кто наиболее подходит для вашего приложения. (Ставки можно делать прямо сейчас!)\r\n\r\n\r\nAkka Streams для простых смертных\r\nВагиф Абилов, Miles\r\n Как можно несколькими строками кода распечатать непрерывный поток сообщений из Твиттера, добавив в него данные о погоде в местах проживания их авторов? И как при этом ограничить скорость запросов к провайдеру метеоусловий, чтобы они не внесли нас в черный список? Все это можно будет увидеть в демо из финальной части доклада. \r\nА перед этим мы познакомимся с технологией Akka Streams, позволяющей работать с потоками данных в реальном времени так же просто, как программисты работают с LINQ-выражениями, не требуя при этом ручной реализации ни отдельных акторов, ни интерфейсов Reactive Streams.\r\nВагиф — супер-профессионал с 30-летним опытом программирования. Вы можете знать его по красивому юзернейму на Github — @object. В настоящее время он занимается разработками систем на F# и C#. Вагиф часто выступает на конференциях, принимает участие в опенсорс-проектах и поддерживает Simple.OData.Client.\r\n\r\n\r\nЯзык, инструменты и методы программирования\r\nRuntime code generation techniques in real life scenarios\r\nRaffaele Rialdi, Vevy Europe\r\n Генерация кода в рантайме — очень мощная и хорошо изученная техника, но многие разработчики все еще неохотно её используют. Обычно изучение Expression Trees начинают с какого-нибудь простого примера типа создания предиката (фильтра) или математического выражения. Но Expression Trees единым жив .NET разработчик. Совсем недавно появилась возможность генерировать код, используя сам компилятор — это делается с помощью API библиотек Roslyn/CodeAnalisys, предоставляющих, кроме всего прочего, еще и парсинг, обход и генерацию исходников. \r\nВ этом докладе мы, вместе с Рафаэлем, проанализируем реальные способы использования кодогенерации. В отдельных случаях они позволяет очень сильно улучшить производительность приложения, что в свою очередь приводит нас к дилемме — если сгенерированный код так полезен и мы собираемся его часто использовать, то как же отлаживать этот код? Это один из фундаментальных вопросов, возникающих в реальных проектах.\r\nРафаэль — практикующий архитектор, консультант и спикер, имеющий MVP в категории Developer Security начиная с 2003 года, который прямо сейчас занимается бэкендами enterprise-проектов, специализируясь на генерации кода и кроссплатформенной разработки для C# и C++. Иначе говоря, Рафаэль именно тот человек, которому в дискуссионной зоне можно задать почти любой вопрос про кодогенерацию, и не только про .NET, и с большой вероятностью он ответит.\r\n\r\n\r\nMono + .NET Core = ❤\r\nЕгор Богатов, Microsoft\r\n Перфоманс, кодогенерация, какая-то жесть… Для разнообразия, здесь у нас будет легкий и приятный доклад, показывающий реальный прогресс наших технологий и позволяющий почувствовать легкую гордость вещами, которыми мы занимаемся.\r\nРазвитие открытого кроссплатформенного .NET Core идёт полным ходом и большое внимание уделяется другим платформам. А как же Mono и мобильные платформы? В этом докладе мы, вместе с Егором, поговорим о текущем состоянии дел Mono и его месте в экосистеме .NET. Расскажем, как мы используем код .NET Core в Mono и наоборот, а также о новых возможностях и инструментах, таких как Embeddinator.\r\nЕгор — разработчик в компании Xamarin (Microsoft) из команды Mono BCL. Работает над улучшением Mono и объединением его с .NET Core. По сути, вся информация из этого доклада — из первых рук. Кому все-таки захочется жести, сможет свободно выловить Егора в дискуссионной зоне и задать все животрепещущие вопросы.\r\n\r\n\r\nTDD вверх ногами\r\nЕгор Бугаенко, Zerocracy\r\n Егор — единственный обладатель значка «дичь» на джава-конференциях. В смысле, кроме стандартных вариантов сложности (легко — «смузи», средне — «бородач», сложно — «коза»), специально для него был изготовлен значок «дичь» с изображением жареной курицы. Мы вас предупредили.\r\nИтак, специально для DotNext, Егор разработал более спокойный и академичный доклад, но выбранная тема, тем не менее, разожжет сердце любого эксперта по хорошим практикам программирования. Егор — автор книги «Elegant Objects», CEO в Zerocracy и Java архитектор в нескольких open source проектах (Rultor, Takes, JCabi).\r\nРазработка через тестирование (a.k.a. TDD) была заново открыта Кентом Беком и подробно разобрана в его знаменитой книге в 2002. В 2014 году Дэвид Хайнемайер Ханссон (создатель Ruby on Rails) сказал, что TDD не работает и только вредит архитектуре. Роберт Мартин (создатель SOLID-принципов) не согласился с этим и объяснил, что TDD может не срабатывать лишь в определённых случаях. Через какое-то время он даже сравнил важность TDD с важностью мытья рук в медицине и добавил, что «его не удивит, если однажды TDD приобретёт силу закона». Два года спустя, а для нас — пару месяцев назад, он написал об этом ещё раз, и ещё, и ещё. Это горячая тема для обсуждения. У нас, конечно, есть своё мнение по этому поводу.\r\n\r\n\r\nLife, liberty and the pursuit of APIness: the secret to happy code\r\nDylan Beattie, Spotlight\r\n Это будет весьма философский, и вместе с тем — сугубо практический доклад. Его будет вести Dylan Beattie — человек с таким количеством рабочих достижений и интересных проектов, что полный список проще прочитать на нашем сайте. В контексте доклада интересно, что Дилан — системный архитектор, который прямо сейчас занимается вопросами построения сложных современных распределенных приложений, и соответственно — вопросами разработки правильных API для них. А еще он, наверное, сыграет нам на гитаре, на вечеринке после первого дня DotNext вместе с Вагифом.\r\nНо вернемся к докладу. Смысл в том, что мы всю жизнь работаем над системами, созданными другими людьми. Начиная с простого UI на телефоне, и заканчивая облачной инфраструктурой современного интернета — взаимодействие между системами и пользователями является фундаментом для нашего понимания технологии и ощущений от её использования. Если правильно выстроить взаимодействие — пользователи останутся счастливыми и будут работать продуктивно. Если же платформа оставляет только плохие впечатления, это приводит только к неэффективности, страхам и мучениям от использования такого поделия.\r\nОсознаем мы или нет, каждый раз при создании новых программ мы создаем и user experience. Люди будут взаимодействовать с нашим кодом — как конечные пользователи, или может быть — как члены команды разработки. А может быть, они — разработчики мобильного приложения, использующие твое API, или это кто-то кому нужно ехать в ночь, чтобы исправлять возникшие проблемы. Со стороны это может казаться совершенно разными кейсами, но на самом деле у них есть кое-что общее. Дилан называет это словом «discoverability». (Я специально не перевожу это слово, потому что доклад все равно будет на английском языке, а в английском языке оно имеет больше значений, чем русский эквивалент «понятность»).\r\nВ этом докладе Дилан обрисует идеи и открытия, касающиеся user experience, дизайна API, психологии и психологии обучения, и покажет как можно интегрировать идею discoverability на всех архитектурных уровнях приложения. Будут иллюстрации на настоящих больших проектах, с объяснениями, как discoverability работает с различными парадигмами взаимодействия. Неважно, создаете ли вы базы данных или системные библиотеки, hypermedia API или мобильные приложения — однажды случится момент, когда кто-то начнет взаимодействовать с вашим кодом — и когда это произойдет — лучше чтобы они остались довольны, верно?\r\n\r\n\r\nПровайдеры типов без боли и магии\r\nРоман Неволин, EPAM\r\n Newtonsoft.Json — самый популярный пакет в NuGet. А рядом с ним, на третьем месте, — Entity Framework. Пожалуй, это неплохо демонстрирует, насколько часто .NET разработчики обрабатывают разнообразные данные. И для каждого типа данных — своя библиотека, а еще куча классов-оберток, которые приходится писать ради получения всех благ строгой типизации. И делать это нужно для каждого нового источника данных.\r\nОднако F# предлагает нам другое решение вечной проблемы — провайдеры типов. Решение, которое позволяет максимально упростить работу с любыми типами данных, избавиться от написания и сопровождения классов оберток, а заодно и решить совсем другие проблемы, вроде рисования сложных графиков и работы с нейронными сетями средствами F#. \r\nЕсли вы хотите узнать, как использовать провайдеры типов, какие проблемы они решают, как работают и как написать собственный провайдер для ваших задач, — приходите на этот доклад! \r\nЗнание F# не обязательно. Роман занимается исследованиями в области Machine Learning и разработкой собственных инструментов машинного обучения, поэтому умеет простыми словами объяснять сложные вещи.\r\n\r\n\r\nФункциональное программирование\r\nВ этот раз у нас есть два доклада про функциональное программирование. Внедрение этих идей вначале продвигалось медленно и трудно, и вот, судя по количеству докладов — будущее наступило.\r\n\r\n\r\nFrom dependency injection to dependency rejection\r\nMark Seemann, blog.ploeh.dk\r\n У функционального программирования есть одна большая проблема — о нем очень непросто рассказывать. Попытки донести людям что-то с использованием терминов типа «зигохистоморфный препроморфизм» легко сводят неподготовленного слушателя с ума.\r\nМарк — автор популярной книги Dependency Injection in .NET, автор бесчисленных блог-постов, и спикер на таком количестве конференций, что ему пришлось завести публичное расписание на своем сайте. Причем рассказывает он каждый раз все больше и больше нового. Если кто и может рассказать о ФП, так это он.\r\nО чем же пойдет речь в этом докладе?\r\nВ объектном-ориентированном проектировании часто используют dependency injection — этот паттерн очень популярен, но тем не менее, является довольно сложным подходом к решению проблемы разделения связанных сущностей. В функциональном программировании есть способы куда проще и эффективней. \r\nВ этом докладе Марк рассмотрит применение dependency injection в классическом объектно-ориентированном дизайне и объяснит, почему его необязательно (даже нежелательно) использовать в функциональном программировании. Следом за этим будет наглядно показано, как использование приемом функционального программирования устраняет необходимость в использовании моков и стабов в модульном тестировании, и позволяет полностью выбросить мусор из прямого перечисления зависимостей.\r\n\r\n\r\nФункциональное программирование для C# разработчиков\r\nНиколай Гусев, Deutsche Bank Technology Centre\r\n Функциональное программирование набирает популярность с каждым днем. Тут и там выходят новые библиотеки, фреймворки и языки, вдохновлённые функциональными концепциями. Всё больше программистов начинают ценить неизменяемое состояние и чистые функции, простую и удобную композицию конструкций и компилятор, находящий львиную долю ошибок ещё до запуска приложения. Язык C# с каждым годом вбирает в себя новые идеи из мира функционального программирования. Мы уже привыкли к удобному Linq и к передаче функций как параметров. А иногда C# и сам становится колыбелью новых идей, например, Reactive Extensions (спасибо Эрику Мейеру). \r\nИнтересно, какие ещё конструкции функционального программирования можно было бы использовать в C#? Об этом расскажет в своем докладе Николай Гусев. Заодно узнаем, как обрабатывать ошибки в стиле функционального программирования, как избавиться от Null Reference Exception, как ещё можно использовать Linq и многое другое.\r\n\r\n\r\nВопросы безопасности\r\nВопросам безопасности посвящено всего два доклада, зато какие! Согласитесь, нам как разработчикам не всегда хочется думать о безопасности, зачастую мы забываем обо всём в погоне за новыми фичами. Эта пара докладов сделает нашу судьбу немного более простой.\r\nASP.NET Core: Механизмы предотвращения атак 2.0\r\nМихаил Щербаков\r\n Как известно, на коференциях JUG.ru Group не приветствуются повторы докладов. Вы уже могли слышать первую версию доклада, и это — не повтор.\r\nВерсия 2.0 доклада будет про встроенные механизмы предотвращения атак в ASP.NET, дополненная и расширенная после выхода .NET Core 2.0. Мы посмотрим на новый веб-фреймворк Microsoft с точки зрения безопасности.\r\nВ докладе Михаил расскажет о различиях в security features ASP.NET разных версий и разберём, как теперь работают встроенные механизмы защиты от XSS и CSRF, какие возможности криптографии доступны из коробки, как устроено управление сессиями. \r\nДоклад будет интересен в первую очередь разработчикам, пишущим защищённые ASP.NET-приложения, специалистам, проводящим security review .NET-проектов, и всем желающим разобраться в реализации компонентов безопасности на примере этой платформы. То есть, это доклад для специалистов, идти на него стоит хорошо осознавая обсуждаемые проблемы.\r\n\r\n\r\nПобеждая инъекции\r\nВладимир Кочетков, Positive Technologies\r\n Второй доклад про безопасность, и он имеет точно такую же практическую направленность. Рекомендуем прочитать на сайте биографию спикера чтобы понять — это лучший эксперт в области безопасности и очевидный кандидат для общения в дискуссионной зоне после доклада.\r\nДоклад посвящен проблеме уязвимостей .NET-приложений к атакам инъекций в языки различных грамматик (HTML, JavaScript, URL, SQL, Path и т.п). \r\nВ первой части доклада будет рассмотрена формальная модель приложения, уязвимого к данному классу атак, и основанный на ней универсальный подход к защите от них.\r\nВторая часть посвящена обзору открытой библиотеки LibProtection, позволяющей разработчикам безопасно использовать привычный API для работы с форматными и интерполируемыми строками при работе с входными данными и скрывающей за ним полнофункциональный инструмент встраиваемой защиты времени выполнения.\r\n\r\n\r\nMachine Learning & Матчасть\r\nMachine Learning сейчас — очень горячая тема. Такая горячая, что мы даже сделали про это специальную конференцию — SmartData, которая прошла неделю назад. Но и DotNext не обошла участь сия!\r\nИскусственный интеллект и нейросети для .NET-разработчиков\r\nДмитрий Сошников, Microsoft\r\n Искусственный интеллект сейчас является одной из самых обсуждаемых тем и главным двигателем цифровой трансформации бизнеса. Стратегия Microsoft в области ИИ включает в себя демократизацию ИИ для разработчиков, т.е. предоставление простых в использовании фреймворков и сервисов для решения интеллектуальных задач. \r\nДмитрий —  технологический евангелист компании Майкрософт,  специализирующийся в области интернета вещей, в разработке универсальных приложений Windows и в области функционального программирования.\r\nВ этом докладе Дмитрий покажет, как .NET-разработчики могут использовать возможности ИИ в своих проектах: начиная от готовых когнитивных сервисов, работающих в облаке, заканчивая обучением нейросетей на .NET-языках и запуском сложных нейросетевых моделей на компактных устройствах типа Raspberry Pi.\r\n\r\n\r\nSelf-aware applications: automatic production monitoring\r\nDina Goldshtein, Aternity\r\n Дорога к дзену — использование приложений с автоматическим мониторингом, который может понизить затраты времени на диагностику и починку проблем на продавшене. В этом докладе Дина расскажет, как писать такие приложения, которые смогут сами себя мониторить, диагностировать в случае проблем, и даже самостоятельно восстанавливаться. В докладе будет использовано много магии типа ETW для аккуратного низкоуровневого мониторинга и библиотеки CLRMD для проверки собственных потоков, объектов на куче и боков. Прямо во время доклада будет представлено множество демок: автоматический мониторинг GC, автоматическое профилирование по CPU, автоматический анализ кучи, и так далее. Дина работает в Riverbed и участвует в разработке инструментов мониторинга для компьютеров и мобильных устройств, так что все эти рассуждения и примеры — не пустые слова, а вполне проверенные решения, которые можно использовать самостоятельно.\r\n\r\n\r\nМониторинг, эксплуатация и DevOps\r\nНе обошлось без докладов, которые рассказывают не просто о кодировании, но и о тесной работе с эксплуатацией продуктовых систем. Кроме «Self-aware applications», которая в общем-то тоже созвучна с этой темой, есть еще три доклада.\r\nThe Metrix has you…\r\nАнатолий Кулаков, Paladyne Systems\r\n Для многих разработчиков процесс релиза их продукта похож на выбрасывание слепого котёнка в пасти диких псов. После этого главная задача авторов — отбиваться от случайно долетевших до них багов. На самом деле, приложение не заканчивает свой жизненный путь в зубах пользователей, а только начинает его. И ему нужна помощь разработчиков не меньше, чем во время становления и тестирования.\r\nВ этом докладе Анатолий расскажет, каким образом можно наблюдать за работой продукта и его боевым окружением, покажет как собирать жизненно необходимые метрики и представлять их в удобоваримом виде. Мы узнаем, что такое Time Series и как они могут помочь нашим и сторонним приложениям в процессе диагностики. Подробно познакомимся с лидерами рынка инструментов для мониторинга, специализированным хранилищем InfluxDB и системой визуализации данных Grafana.\r\n\r\n\r\nNUKE: Build automation for C# developers\r\nMatthias Koch, JetBrains\r\n Матиас — разработчик из JetBrains, который кроме основной работы, последние 5 лет занимается собственными open source проектами, такими как  TestFx, TestLinker и NUKE.\r\nNUKE — система автоматизации сборки, основанная на  C# DSL. Она позволяет автоматизировать процессы типа компиляции, сборки артефактов или деплоя приложений. NUKE отличается от аналогов тем, что встраивается в общую инфраструктуру как обычный проект на C#, и это позволяет на полную катушку использовать любимые возможности IDE вроде отладки, автодополнения, навигации по коду и умных рефакторингов. В этом докладе расскажет об этих и других возможностях  NUKE и способах его использования. Мы получим эту информацию из первых рук — от создателя технологии!\r\n\r\n\r\nНепрерывное развёртывание .NET Core приложений и инфраструктуры в Linux среде\r\nКирилл Ветчинкин, TYME\r\n Многие ли из нас на практике используют Linux? А вот Кирилл — руководитель отдела разработки в компании TYME, все проекты в котором он ведет, используя .NET Core на Linux.\r\nВ докладе будет продемонстрирован практический опыт организации процесса разработки и развёртывания .NET Core приложений на Linux, а также настройка самих сред из кода. Для этого мы будет использоваться связка таких средств, как: GitLab, TeamCity, Ansible, Octopus Deploy, Docker. Будет показана связь данных технологий для формирования единого конвейера. Также будут проговариваться плюсы и минусы, которые в TYME извлекли от перехода на Linux.\r\n\r\n\r\nНемного философии\r\nЗавершающий кейноут: Unchain my heart\r\nDino Esposito, JetBrains \r\n Представим себя в 2048 году. Что будет считаться искусством? Как мы будет заниматься привычными делами, как будем делать бизнес?\r\nДино расскажет нам историю — вымышленную историю — которую можно считать научной фантастикой. Или особой сотовой фантастикой. В 2008 году один парень сделал Bitcoin. Чтобы управлять Bitcoin, нужно использовать общий реестр — Blockсhain. Блокчейн — это публичный реестр для транзакций — в перспективе, транзакций любого типа. Представьте, что кто-то пошел дальше, на парочку уровней. Блокчейн распространился по миру, и стал основой для совершенно всего. Банки, нотариусы, органы государственного управления — короче, любые сторонние удостоверяющие органы — оказались на грани катастрофы. \r\nПредставьте, что в 2048 году весь мир оказался целиком основан на Блокчейне, и любая транзакция в нём видна, отслеживаема и проверяема кем угодно. Представьте мир, в котором люди одеваются в одежду, прочипованную RFID, подключенными к Блокчейну. За любым твоим шагом тоже следят (кстати, сейчас в 2017 они следят тоже!). Твое местоположение всем хорошо известно, все действия я записаны. Представьте мир, в котором компьютеры занимаются большинством наиболее нудных задач, которые ты когда-либо встречал в жизни — они делают за тебя решения, ведут за тебя машину, заказывают за тебя билеты на самолет, покупают для тебя разные вещи — и даже пишут за тебя программы. \r\nПредставьте мир, в котором только мысли и сны всё действительно твои, и они — единственная приятная вещь, которая у тебя еще есть. (Нет, я не думаю, что компьютеры будут заниматься за тебя сексом, даже в 2048!). Это будет утопия или анти-утопия? Мир без обмана, зависти и преступлений. Полный честности, свободы, любви. (И да, свободная любовь — типа той, о которой хиппи мечтали в 70х, но гораздо лучше). Время покажет, и время летит очень быстро."
    }
]